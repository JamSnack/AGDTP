<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_railgunBullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>BULLET</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 6; //Destroy alarm

pierce_list = ds_list_create();

target = noone;
tx = x;
ty = y;
scale = 2;

//Delayed attack init
initialized = false;
alarm[1] = 1;
knock_amt = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delayed initialization to let scr_createprojectile catch up
if instance_exists(ENEMY)
{
    var xx = x;
    var yy = y;
    var longest_dist = 0;
    var targ = noone;

    with ENEMY
    {
        var dist = point_distance(x,y,xx,yy);
        
        if dist &gt; longest_dist &amp;&amp; dist &lt;= 16*7
        {
            longest_dist = dist;
            targ = id;
        }
    }
    
    //If we failed to find a target
    target = targ;
    
    if target == noone
    {
        energy += 2; //Return lost energy
        instance_destroy();
    }
    else
    {
    
        tx = target.x;
        ty = target.y;
        
        if instance_exists(target)
        {
            ds_list_add(pierce_list,target);
        
            //Damage
            var _d = damage;
            
            with target
            {   
                scr_hurt(_d,1,true,3.5);
                event_user(0);
            }
        }
    }
}

initialized = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy after a few frames
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if initialized == false then exit;

//This is the same collision check used in place_meeting_fast. Here it is being used to return the ID of the enemy.
var _enemy = collision_line(x,y,tx,ty,ENEMY,false,true);

if instance_exists(_enemy)
{
    if ds_list_find_index(pierce_list,_enemy) == -1
    {
        ds_list_add(pierce_list,_enemy);
        
        //Damage
        var _d = damage;
        
        with _enemy
        {   
            scr_hurt(_d,1,true,3.5);
            event_user(0);
        }
    }
}

//Death check
if scale &lt;= 0
{
    instance_destroy();
}
else 
{
    scale -= 2/5; //2/5 = numerator (scale in the create event) divided by denominator (alarm[0] in the create event. -1 for init alarm)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
if initialized == true
{
    draw_set_color(c_white);
    draw_line_width(x,y,tx,ty,scale*2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
