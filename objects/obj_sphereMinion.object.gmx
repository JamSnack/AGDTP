<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sphere</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>ENEMY</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the Pylon
scale = 0.25;
image_xscale = scale;
image_yscale = scale;

canActiveRegion = false;
canHurt = true;
hp = 5+(5*floor(wave/3));
image_speed = 10/60;
state = MOVE;
stunned = false;

vsp = 0;
atkBox = (32); //divided by 2 on calculation.
damage = 4; //Attack damage.

hurtAlarm = 1;

target = obj_player; //Target priority.

objective = target;
stateLockAlarm = 2;
aggroRange = 128;

stateLock = false;

//Flying speed
hAccel = 0;
vAccel = 0;
maxAccel = 5;
accelRate = 0.1;
death_gib = part_nullGib;

event_inherited();

//Other Locals
sk_diameter = 64;
sm_centerDistance = 0; //The Diameter from Point A to Point B, and the distance on that line from A to B (0, 128);
sm_rate = 0.5;
sm_dir = 1;
knockType = "FLY";
deathSound = snd_enemydie_ghost;
knock_resistance = 0.12;
parentKing = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset state lock
stateLock = false;

objective = target;
state = WANDER;
image_index = sign(objective.x-x);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset hurt
canHurt = true;
target = obj_player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sphere minion states
objective = obj_pie;

if distance_to_object(obj_player) &lt;= aggroRange &amp;&amp; obj_player.dead == false
{
    ai_shadowGremlin(MOVE,0,0,0,0,obj_player,0,atkBox);
}
else if instance_exists(parentKing)
{
    //Travel along the centerline.
    sm_centerDistance = approach(sm_centerDistance,sk_diameter*sm_dir,sm_rate);
    if sm_centerDistance = sk_diameter*sm_dir then sm_dir=-sm_dir;
    
    //Move toward the centerPoint.
    var centerPointX = parentKing.x+sm_centerDistance;
    var centerPointY = parentKing.y;
    
    var dir = sign(centerPointX-x);
    var vdir = sign(centerPointY-(y+16));
    
    //-Horizontal Acceleration
    if dir == -1
    { if hAccel &gt; -maxAccel then hAccel -= accelRate; }
    else if dir == 1 { if hAccel &lt; maxAccel then hAccel += accelRate; }
    
    //-Vertical Acceleration
    if vdir == -1 //Objective is up
    { if vAccel &gt; -maxAccel then vAccel -= accelRate; }
    else if vdir == 1 { if vAccel &lt; maxAccel then vAccel += accelRate; }
    
    var targetPlrTile = noone;
    var _stall = 1;
    
    if !place_meeting(x+hAccel,y,OBSTA)
    { x += hAccel; }
    else
    {
        targetPlrTile = instance_place(x+hAccel,y,PLRTILE);
        
        stateLock = true;
        alarm[stateLockAlarm] = _stall;
        hAccel = -hAccel;
    }
    if !place_meeting(x,y+vAccel,OBSTA)
    { y += vAccel; }
    else
    {
        targetPlrTile = instance_place(x,y+vAccel,PLRTILE);
        
        stateLock = true;
        alarm[stateLockAlarm] = _stall;
        vAccel = -vAccel;
    }
}
else
{
    ai_shadowGremlin(MOVE,0,0,0,0,obj_pie,0,atkBox);
}

image_xscale = scale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
