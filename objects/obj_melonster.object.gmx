<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_melonster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>INV_ENEMY</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the Melonster
canActiveRegion = true;

canHurt = true;
maxHp = scr_enemyHpIndex(object_index);
hp = maxHp;
state = "DEPOT";
last_move = noone;

vsp = 0;
atkBox = 32; //divided by 2 on calculation.
damage = 8; //body damage.
attackCooldown = 4; //How long until the boss rolls for another attack.

hurtAlarm = 1;
image_speed = 0;

target = obj_pie; //objective priority.

objective = target;
stateLockAlarm = 2;
aggroRange = 0; //0 tiles

//Flying speed
hAccel = 0;
vAccel = 0;
maxAccel = 1;
accelRate = 0.1;

//Animation

//Ai
transition_to = "WANDER";
resource_memory_x = ds_list_create();
resource_memory_y = ds_list_create();
sight = 16*5; // The radius of the melon monster's vision circle.
local_essence = 10; //How much essence the melon monster has.
essence_needed_to_depot = 50; //How much essence the melon monster needs to auto-depot;
base_point_x = x;
base_point_y = world_height;
tile_grab = false;
tile_grab_vine = noone;
gremlin_grab = false; //Whether or not a vine exists to grab a gremlin.
gremlin_grab_vine = noone; //The ID of the gremlin grabbing vine.
vine_delay_set = 27;
vine_delay = 0;
vine_player_delay = 0;
depot_delay = 0;

while (collision_rectangle(base_point_x-2,base_point_y-2,base_point_x+2,base_point_y+64,OBSTA,false,false) != noone)
{
    base_point_y -= 16;
}


//Other locals
stateLock = true;
alarm[stateLockAlarm] = 20;
_xscale = 0; //Used for calculating image_angle in-place of classic image_xscale flipping.

image_xscale = sign(target.x-x);

spawn_weight = 8;
event_inherited();
scale = 0.8;
image_xscale = scale;
image_yscale = scale;
alarm[3] = -1;
knockType = "FLY";
knock_resistance = 2;

deathSound = snd_enemydie_boss;

canDespawn = false;

//Initialize local chunk activation
alarm[3] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

scr_spawnEssence(1,2,local_essence);

repeat(2+irandom(2))
{
    scr_dropItem(ITEMID.item_melonite,2,ITEMTYPE.def,x+random_range(-2,2),y+random_range(-2,2),noone);
}

scr_dropItem(ITEMID.cons_melonChunk,4+irandom(3),ITEMTYPE.consumable,x+random_range(-2,2),y+random_range(-2,2),noone);

if dropItem != true then exit;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chunk activation
var border = 16*6;
instance_activate_region(x-border,y-border,border*2,border*2,true);

alarm[3] = 25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset state lock
stateLock = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset hurt
canHurt = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var canSeeTarget = !collision_line(x,y,target.x,target.y,OBSTA,false,false);

//Gremlin Ai
//target = obj_pie;
objective = obj_pie;

ai_melonAi(state,1,objective,-4,atkBox);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///IGNORE INHERITED EVENT!
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
/*draw_text(x,y+5,"state: "+string(state));
draw_text(x,y+10,"essence: "+string(local_essence));
var direction_to_objective = point_direction(x,y,objective.x,objective.y);
draw_circle(x+lengthdir_x(16*4,direction_to_objective),y+lengthdir_y(16*4,direction_to_objective),2,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
