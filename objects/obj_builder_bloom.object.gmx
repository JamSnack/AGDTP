<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_builder_bloom</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>ENEMY</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stateLock = false; //Lock the enemy in its current state.
knockType = "LAND";
hForce = 0;
vForce = 0;
hspd = 0;
vsp = 0;
knock_resistance = 100;
agility = 6;
dropItem = false;
death_gib = spr_gib;
knockAmt = 5;
spawn_weight = 1;
maxHp = scr_enemyHpIndex(object_index);
hp = maxHp;
canHurt = true;
hurtAlarm = 1;
tiles_x_away_from_target = 0;
tiles_y_away_from_target = 0;
target_x = obj_pie.x;
target_y = obj_pie.y;


if (point_distance(x,0,RAIDBOUND_Lower,0) &lt;= point_distance(x,0,RAIDBOUND_Upper,0))
{
    target_x = RAIDBOUND_Lower;
} else target_x = RAIDBOUND_Upper;

shield_charges_max = 0;
shield_charges = 0;
charge_rate = 0;

deathSound = snd_enemydie_monster;

scale = 1;

//Local variables
landed = false;
target_height = 16*4; //How many tiles the builder-bloom will try to fall before building.
building_point_x = 0;
building_point_y = 0;

//Initial velocity
vspeed = -2;
hspeed = 2*sign(x-RAIDBOUND_Lower);
gravity = grav;


//Change some stats for a true boss fight;
if worldControl.raidBossID == id
{
    canDespawn = false;
    raid_boss = false;
    maxHp = scr_enemyHpIndex(object_index); //extra 50% hp
    hp = maxHp;
    scale += 0.1;
    image_xscale = scale;
    image_yscale = scale;
} 
else 
{
    raid_boss = false;
    //Gremlin weight should only be factored once :)
    current_grem += spawn_weight;
}

//Prevent spawning inside tiles.
//TODO: For optimization, replace while condition with collision_point after snapping gremlin to the middle of the tile grid.
while place_meeting_fast(0,0,OBSTA) y -= 16;

event_inherited();
canDespawn = false;

//---Wave Menu enemy sprites----
//Hud Control information sprites!
if !ds_exists(hudControl.enemySprites,ds_type_list) { hudControl.enemySprites = ds_list_create(); }
var enemySprites = hudControl.enemySprites;

//If the enemy sprite is not apart of our list, then add it.
if ds_list_find_index(enemySprites,object_index) == -1
{
    ds_list_add(enemySprites,object_index);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delayed off-screen instance deactivation
var on_screen = insideView(x,y);
var border = 16;
if !on_screen then instance_deactivate_region(x-border,y-border,border*2,border*2,true,true);

instance_activate_object(obj_vineTile);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fall to target height and then start building
if (target_height &gt;= 0 &amp;&amp; landed == false)
{
    if (vspeed &gt; 0)
    {
        //print(target_height);
        target_height -= vspeed;
        
        if (target_height &lt;= 0)
        {
            landed = true;
            
            gravity = 0;
            hspeed = 0;
            vspeed = 0;
            x = round(x/16)*16;
            y = round(y/16)*16;
            building_point_x = x;
            building_point_y = y;
        }
    }
    
    image_angle += hspeed*2;
}
else
{
    //Building
    if (tiles_y_away_from_target &gt;= tiles_x_away_from_target)
    {
        if (point_distance(x,y,x,building_point_y) &lt;= 2)
        {
            y = building_point_y;
            event_user(4);
            instance_create(x,building_point_y,obj_vineTile);
            
            var _vd = sign(target_y-y);
            building_point_y = y+(16*_vd);
            
            //Destroy the melon bloom before it causes too much trouble
            if point_distance(x,y,target_x,target_y) &lt;= 16 then instance_destroy();
        }
        else if (building_point_y &gt; y)
        {
            y += agility;
        }
        else if (building_point_y &lt; y)
        {
            y -= agility;   
        }
    }
    else if point_distance(x,y,building_point_x,y) &lt;= 2
    {   
        x = building_point_x;
        event_user(4);
        instance_create(building_point_x,y,obj_vineTile);
        
        var _d = sign(target_x-x);
        building_point_x = x+(16*_d);
        
        //Destroy the melon bloom before it causes too much trouble
        if point_distance(x,y,target_x,target_y) &lt;= 16 then instance_destroy();
    }
    else if (building_point_x &gt; x)
    {
        x += agility;
    }
    else if (building_point_x &lt; x)
    {
        x -= agility;
    }
}

image_angle += 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FUNCTION USED WHEN PLACING STUFF
//Temp activation

var on_screen = insideView(x,y);
var border = 16;
if !on_screen then instance_activate_region(x-border,y-border,border*2,border*2,true);

//Destroy intruding objects
var _i = collision_point(x,y,TILE_ALL,false,true);

if (_i != noone) 
{
    with _i 
    {   
        //Crack open them tiles for some exotic loot:
        if object_get_parent(object_index) == TILE then event_user(2);
        
        instance_destroy();
    } 
}

//Update tile lighting
for(i=0;i&lt;9;i++)
{
    //Check every adjacent block starting with the top left most block.

    var column = floor(i/3);
    var col = collision_point(x-16+(i*16)-(column*16*3),y-16+(16*column),TILE_ALL,true,true);
    
    if col != noone
    {
        with col 
        {
            event_user(1);
            light_level = 255;
        }
    }
}

//Tiles away
tiles_x_away_from_target = round(point_distance(x,0,target_x,0)/16)*16;
tiles_y_away_from_target = round(point_distance(0,y,0,target_y)/16)*16;

instance_create(x,y-16,obj_breaker_bloom);

//Delayed off-screen instance deactivation
//if !on_screen then alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
