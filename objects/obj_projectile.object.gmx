<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>PAUSE</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize projectile
localGrav = 0;
deadProjectile = false;
tags = noone;
time = 0;
origin_x = x;
origin_y = y;
canCollide = false;

//Latent behaviors
bBouncy = false;
bHive = false;
bSplit = false;
canBounce = true;
canReverse = true;

//- stab - init in script
bStab = false;
armStabComplete = false;
armOffset = 0; //Used for thrusting the arm forward or backward!
armOffsetGoal = 0;
armOffsetRate = 0;

bSwing = false;

type = 0;

//INITIALIZATION IS SHARED WITH scr_useWeapon.

image_speed = 30/60;

event_inherited();

alarm[2] = room_speed*10; //Ensure eventual total destruction
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DESPAWN ALARM
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BEHAVIOR STUFF
if bBouncy == true then canBounce = true;

if type == "BOOMERANG" &amp;&amp; canReverse == true
{
    alarm[2] = room_speed*3;
    canReverse = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>deadProjectile = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//--------Behavior Constants---------------
if type != "BOOMERANG" then image_angle = direction;

//--------------Behavior Characteristics---------------------------
var lx = lengthdir_x(speed,direction);
var ly = lengthdir_y(speed,direction);

// - Stab
if bStab == true
{    
    //Despawn and track the hitbox
    if (obj_player.armStabComplete == false) &amp;&amp; obj_player.dead == false
    { 
        //- cute little magic used for simulating 360 degrees of arm movement that isn't actually real ;-;
        var _dir = point_direction(obj_player.x,obj_player.y,mouse_x,mouse_y);
        
        //- prepare _dir for further processing...
        if image_xscale == -1 then _dir = (_dir-180)*-1;
        
        direction = _dir;
    
        x = obj_player.hitSyncX;
        y = obj_player.hitSyncY;
        alarm[2] = 4;
    }
}
else if bSwing == true
{
    if obj_player.armAngle &lt; -40
    {
        instance_destroy();
    }
    else
    {
        x = obj_player.x;
        y = obj_player.y;
    }
}

//TYPE BEHAVIORS:
switch type
{
    case "SPHERE":
    {
        if time &gt; 25
        {
            //Sphere behaviors
            var _enemy = instance_nearest(x,y,ENEMY);
        
            if _enemy != noone //if an enemy exists
            { 
                if distance_to_object(_enemy) &lt;= 16*8
                {
                    if speed != 0 then speed = approach(speed,0,1);
                
                    //Direction
                    var dir = sign(_enemy.x-x);
                    var vdir = sign(_enemy.y-(y));
                    
                    //Horizontal Acceleration
                    hAccel = approach(hAccel,maxAccel*dir,accelRate);
                    
                    //Vertical Acceleration
                    vAccel = approach(vAccel,maxAccel*vdir,accelRate);
                }
            }
        }
        
        if bBouncy == true
        {
            if hAccel != 0 &amp;&amp; place_meeting_fast(hAccel,0,OBSTA)
            { hAccel=-hAccel; }
                    
            if vAccel != 0 &amp;&amp; place_meeting_fast(0,vAccel,OBSTA)
            { vAccel=-vAccel; }
        } else if place_meeting_fast(hAccel,vAccel,OBSTA) { instance_destroy(); }
        
        x += hAccel;
        y += vAccel;
    }
    break;
    
    case "BOOMERANG":
    {
        if alarm[1] == -1 &amp;&amp; canReverse == true
        {
            alarm[1] = room_speed*0.5;
        }
    
        image_angle += 5*speed;
        
        if canReverse == false
        {
            speed = approach(speed,-oSpeed,0.5);
            
            if point_distance(ox,oy,x,y) &lt; 2
            {
                instance_destroy();
            }
        }
    }
    break;
}

//Gravity
if localGrav != 0 &amp;&amp; !place_meeting_fast(0,1,OBSTA)
{ vspeed += (localGrav); }

//Time
time += 1;

//Collisions based on projectile type
if canCollide == true &amp;&amp; (y &lt; stoneLayer || (instance_exists(obj_nullLight) &amp;&amp; !place_meeting_fast(0,0,obj_nullLight)))
{
    var col = place_meeting_fast(0,0,OBSTA);
    
    if col == true
    {
        //ON TILE COLLISIONS TAGS
        if bSplit == true
        {
            var i = 0;
        
            repeat(2)
            {
                var _p = instance_copy(false);
                
                if instance_exists(_p)
                {
                    //-Apply projectile statistics
                    _p.dmg = dmg;
                    _p.direction = direction+(45-i*90); //first proj has angle 45, next has -45
                    _p.image_angle = direction;
                    _p.ox = x;
                    _p.oy = y;
                    _p.image_xscale = image_xscale-0.1;
                    _p.image_yscale = image_yscale-0.1;
                    _p.bSplit = false;
                    
                    bSplit = false;
                    i+=1;
                    
                    if i == 2 then instance_destroy();
                }
            }
        }
    
        //----Collide with things - for real--!
        switch type
        {
            case "SPHERE":
            {
                speed = 0;
            }
            break;
            
            case "BOOMERANG":
            {
                if canReverse == true
                {
                    if alarm[2] == -1 then alarm[2] = room_speed*3;
                    canReverse = false;
                }
            }
            break;
            
            case 0:
            {
                //Do nothing
            }
            break;
            
            default:
            {   
                // - Bouncy
                if bBouncy == true
                {
                    if canBounce == true
                    {    
                        //Bounce the projectile
                        
                        if instance_exists(OBSTA)
                        {
                            //X collisions
                            if collision_circle(x+hspeed,y,1,OBSTA,false,true) != noone
                            { 
                                repeat(20)
                                { 
                                    if !place_meeting(x+sign(hspeed),y,OBSTA)
                                    { x+=sign(hspeed); }
                                    else break;
                                }
                                
                                hspeed = -hspeed; 
                            }
                            
                            
                            //Y collisions
                            if collision_circle(x,y+vspeed,1,OBSTA,false,true) != noone
                            { 
                                repeat(20)
                                { 
                                    if !place_meeting(x,y+sign(vspeed),OBSTA)
                                    { y+=sign(vspeed); }
                                    else break;
                                }
                                
                                vspeed = -vspeed;
                            }
                            
                            canBounce = false;
                            alarm[1] = 1;
                            
                            //Despawn soon!
                            if alarm[2] == -1 { alarm[2] = room_speed*4; }
                        }
                    }
                }
                else
                {
                    instance_destroy();
                }
            }
        }
    }
}

if canCollide == false
{
    //Turn on collision with tiles after the projectile has traveled for some pixels.
    if distance_to_point(origin_x,origin_y) &gt; 3 then canCollide = true;
}

//-----------ENEMY COLLISION--------------------
var enemy_col = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,ENEMY,false,true);

if enemy_col != noone
{
    if enemy_col.canHurt == true
    {
        var k = knkAmt;
        var d = dmg;
    
        //friction += 0.05;
        
        with enemy_col 
        {
            scr_hurt(d,DEF_HURT,true,k); 
            event_user(0); //register hit event for gremlin
        }
        
        //TAGS
        if bHive == true
        {
            var _p = instance_create(x,y,obj_projectile);
            //-Apply projectile statistics
            _p.speed = 1;
            _p.friction = 0;
            _p.type = 2; //Bullet
            _p.sprite_index = spr_stinger;
            _p.dmg = dmg/2;
            _p.direction = irandom(359);
            _p.image_angle = direction;
            _p.knkAmt = 2;
            _p.ox = x;
            _p.oy = y;
        }
        
        if bSplit == true
        {
            var i = 0;
        
            repeat(2)
            {
                var _p = instance_copy(false);
                
                if instance_exists(_p)
                {
                    //-Apply projectile statistics
                    _p.dmg = dmg/3;
                    _p.direction = direction+(45-i*90); //first proj has angle 45, next has -45
                    _p.image_angle = direction;
                    _p.ox = x;
                    _p.oy = y;
                    _p.image_xscale = image_xscale-0.1;
                    _p.image_yscale = image_yscale-0.1;
                    _p.bSplit = false;
                    
                    bSplit = false;
                    i+=1;
                    
                    if i == 2 then instance_destroy();
                }
            }
        }
        
        //Destroy the projectile
        if type == 1 || type == 2 then instance_destroy();
        else if type == "SPHERE"
        { if alarm[2] == -1 then alarm[2] = room_speed*8; }
        else if type == "BOOMERANG"
        {
            if alarm[2] == -1 then alarm[2] = room_speed*3;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DESTROY
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
