<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize projectile
localGrav = 0;
deadProjectile = false;
tags = noone;
time = 0;

//Latent behaviors
bBouncy = false;
bHive = false;
canBounce = true;
canReverse = true;

//- stab - init in script
bStab = false;
armStabComplete = false;
armOffset = 0; //Used for thrusting the arm forward or backward!
armOffsetGoal = 0;
armOffsetRate = 0;

type = 0;

//INITIALIZATION IS SHARED WITH scr_useWeapon.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DESPAWN ALARM
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BEHAVIOR STUFF
if bBouncy == true then canBounce = true;

if type == "BOOMERANG" &amp;&amp; canReverse == true
{
    alarm[2] = room_speed*3;
    canReverse = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>deadProjectile = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//--------Behavior Constants---------------
if type != "BOOMERANG" then image_angle = direction;

//--------------Behavior Characteristics---------------------------
var lx = lengthdir_x(speed,direction);
var ly = lengthdir_y(speed,direction);

// - Stab
if bStab == true
{    
    //Despawn and track the hitbox
    if obj_player.armStabComplete == false &amp;&amp; obj_player.dead == false
    { 
        //- cute little magic used for simulating 360 degrees of arm movement that isn't actually real ;-;
        var _dir = point_direction(obj_player.x,obj_player.y,mouse_x,mouse_y);
        
        //- prepare _dir for further processing...
        if image_xscale == -1 then _dir = (_dir-180)*-1;
        
        direction = _dir;
    
        x = obj_player.hitSyncX;
        y = obj_player.hitSyncY;
        alarm[2] = 4;
    }
}


// - Bouncy
if bBouncy == true
{
    if canBounce == true
    {    
        //Bounce the projectile
        
        if instance_exists(OBSTA)
        {
            //X collisions
            if collision_circle(x+hspeed,y,1,OBSTA,false,true)
            { 
                repeat(20)
                { 
                    if !place_meeting(x+sign(hspeed),y,OBSTA)
                    { x+=sign(hspeed); }
                    else break;
                }
                
                hspeed = -hspeed; 
            }
            
            
            //Y collisions
            if collision_circle(x,y+vspeed,1,OBSTA,false,true)
            { 
                repeat(20)
                { 
                    if !place_meeting(x,y+sign(vspeed),OBSTA)
                    { y+=sign(vspeed); }
                    else break;
                }
                
                vspeed = -vspeed;
            }
            
            canBounce = false;
            alarm[1] = 1;
            
            //Despawn soon!
            if alarm[2] == -1 { alarm[2] = room_speed*4; }
        }
    }
}

//TYPE BEHAVIORS:
switch type
{
    case "SPHERE":
    {
        if time &gt; 25
        {
            //Sphere behaviors
            var _enemy = instance_nearest(x,y,ENEMY);
        
            if _enemy != noone //if an enemy exists
            { 
                if distance_to_object(_enemy) &lt;= 16*8
                {
                    if speed != 0 then speed = approach(speed,0,1);
                
                    //Direction
                    var dir = sign(_enemy.x-x);
                    var vdir = sign(_enemy.y-(y));
                    
                    //Horizontal Acceleration
                    hAccel = approach(hAccel,maxAccel*dir,accelRate);
                    
                    //Vertical Acceleration
                    vAccel = approach(vAccel,maxAccel*vdir,accelRate);
                }
            }
        }
        
        if place_meeting(x+hAccel,y,OBSTA)
        { hAccel=-hAccel; }
                
        if place_meeting(x,y+vAccel,OBSTA)
        { vAccel=-vAccel; }
        
        x += hAccel;
        y += vAccel;
    }
    break;
    
    case "BOOMERANG":
    {
        if alarm[1] == -1 &amp;&amp; canReverse == true
        {
            alarm[1] = room_speed*2;
        }
    
        image_angle += 5*speed;
        
        if canReverse == false
        {
            speed = approach(speed,-oSpeed,0.5);
        }
    }
    break;
}

//Gravity
if localGrav != 0 &amp;&amp; !place_meeting(x,y+1,OBSTA)
{ vspeed += (localGrav); }

//Time
time += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ENEMY">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.canHurt == true
{ 
    var k = knkAmt;
    var d = dmg;

    //friction += 0.05;
    
    with other 
    {
        scr_hurt(d,DEF_HURT,true,k); 
        event_user(0); //register hit event for gremlin
    }
    
    //TAGS
    if bHive == true
    {
        var _p = instance_create(x,y,obj_projectile);
        //-Apply projectile statistics
        _p.speed = 1;
        _p.friction = 0;
        _p.type = 2; //Bullet
        _p.sprite_index = spr_stinger;
        _p.dmg = dmg;
        _p.direction = irandom(359);
        _p.image_angle = direction;
        _p.knkAmt = 2;
        _p.ox = x;
        _p.oy = y;
    }
    
    //Destroy the projectile
    if type == 1 || type == 2 then instance_destroy();
    else if type == "SPHERE"
    { if alarm[2] == -1 then alarm[2] = room_speed*8; }
    else if type == "BOOMERANG"
    {
        if alarm[2] == -1 then alarm[2] = room_speed*3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="OBSTA">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if bBouncy == true then exit;

if other.object_index != obj_nullLight
{
    //Kill these types of projectiles:
    if (type == 1 || type == 2) then instance_destroy()
    else if type == "SPHERE"
    {
        speed = 0;
    }
    else if type == "BOOMERANG" &amp;&amp; canReverse == true
    {
        if alarm[2] == -1 then alarm[2] = room_speed*3;
        canReverse = false;
    } else if canReverse == false then instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
