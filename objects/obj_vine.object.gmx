<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the vine

parent_id = noone;
ox = x;
oy = y;
range = 0;
vine_attached = false;
vine_x = x;
vine_y = y;
vine_target_x = 0; //rename to vine_length_x;
vine_target_y = 0; //rename to vine_length_y;
vine_length = 0;
vine_parts = 0; //Amount of sprites the vine will be made up of
vine_sprite_height = sprite_get_height(spr_melon_vine);
vine_sprite_width = sprite_get_width(spr_melon_vine);
vine_segment_length = vine_sprite_width-4; //Length of a segment
vine_direction = 0; //The direction of the vine vector.
vine_direction_x = 0; //lengthdir_x(vine_segment_length, vine_direction);
vine_direction_y = 0;
vine_speed = 1;
image_speed = 0;
image_index = 1;
behavior_return = false; //Whether or not the vine is set to return upon reaching it destination and despawning at OX, OY
damage_amt = 0; //0 if no damage calculation, set to anything else to for a hitbox to be drawn onto the tip of the vine.
reversing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vine calculations

//vine centering and self-destruction
if !instance_exists(parent_id)
{
    instance_destroy();
}
else
{
    ox = parent_id.x;
    oy = parent_id.y;
}

//vine movement
if reversing == false &amp;&amp; (vine_x != vine_target_x || vine_y != vine_target_y) 
{
    vine_direction = point_direction(ox,oy,vine_target_x,vine_target_y);
    image_angle = vine_direction;
    vine_length = point_distance(ox,oy,vine_target_x,vine_target_y);
    vine_parts = floor(vine_length/vine_segment_length);

    //Move the vine toward the target point
    if vine_x != vine_target_x 
    {
        vine_direction_x = lengthdir_x(vine_segment_length, vine_direction);
        vine_x = approach(vine_x,vine_target_x,vine_speed);
    }
    
    if vine_y != vine_target_y 
    {
        vine_direction_y = lengthdir_y(vine_segment_length, vine_direction);
        vine_y = approach(vine_y,vine_target_y,vine_speed);
    }
}
else if behavior_return == true// &amp;&amp; point_distance(vine_x,vine_y,vine_target_x,vine_target_y) &lt; 2
{
    reversing = true;

    vine_direction = point_direction(ox,oy,vine_target_x,vine_target_y);
    image_angle = vine_direction;
    vine_length = point_distance(ox,oy,vine_target_x,vine_target_y);
    vine_parts = floor(vine_length/vine_segment_length);

    //Bring the vine back home without affecting target_point
    if vine_x != ox 
    {
        vine_direction_x = lengthdir_x(vine_segment_length, vine_direction);
        vine_x = approach(vine_x,ox,vine_speed);
    }
    
    if vine_y != oy 
    {
        vine_direction_y = lengthdir_y(vine_segment_length, vine_direction);
        vine_y = approach(vine_y,oy,vine_speed);
    }
    
    print("----REVERSE----");
    
    if point_distance(vine_x,vine_y,ox,oy) &lt; 4
    {
        print("obj_vine&gt; death");
        instance_destroy();
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the vine
var x_perc_flipped = false;
var y_perc_flipped = false;

if vine_x &gt; vine_target_x then x_perc_flipped = true;
if vine_y &lt; vine_target_y then y_perc_flipped = true;

//Calculate how close the vine is to its target and use it as a percentage
var x_perc,y_perc;

//x_percentage
if x_perc_flipped
{
   x_perc = ((vine_target_x-vine_target_x)/(vine_x+0.1-vine_target_x));
}
else x_perc = ((vine_x-ox)/(vine_target_x-ox+0.1));
print("x_perc is: "+string(x_perc));

//y_percentage
if y_perc_flipped
{
   y_perc = ((vine_y-oy)/(vine_target_y-oy+0.1));
}
else y_perc = ((vine_target_y-vine_target_y)/(vine_y+0.1-vine_target_y));
print("y_perc is: "+string(y_perc));

for(_i = 0; _i &lt; vine_parts; _i++)
{
    //utilize the percentage
    //var x_perc = _i*x_perc;
    //var y_perc = _i*y_perc;

    if _i == vine_parts-1
    {
        //Vine knife
        draw_sprite_ext( spr_melon_vine, 0, ox+(vine_direction_x)*(_i*x_perc), oy+(vine_direction_y)*(_i*y_perc), 1, 1, vine_direction, c_white, 1);
    }
    else
    {
        //Default vine sprite
        draw_sprite_ext( spr_melon_vine, 1, ox+(vine_direction_x)*(_i*x_perc), oy+(vine_direction_y)*(_i*y_perc), 1, 1, vine_direction, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
