<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Properties
globalvar dev;
dev = false; //Dev tool boolean.

ideal_width=0;
ideal_height=247;
zoom=0.8;
max_zoom=1;
display_width=display_get_width();
display_height=display_get_height();

aspect_ratio=display_width/display_height;

ideal_width=round(ideal_height*aspect_ratio);
ideal_height=round(ideal_width / aspect_ratio);

//Perfect Pixel Scaling
if(display_width mod ideal_width != 0)
{
  var d = round(display_width/ideal_width);
  ideal_width=display_width/d;
}
if(display_height mod ideal_height != 0)
{
  var d = round(display_height/ideal_height);
  ideal_height=display_height/d;
}

//Check for odd numbers
if(ideal_width &amp; 1)
  ideal_width++;
if(ideal_height &amp; 1)
  ideal_height++;
    
//Calculate Max Zoom
max_zoom=floor(display_width/ideal_width);
  
for(var i=1; i&lt;=room_last; i++)
{
  if(room_exists(i))
  {
    room_set_view(i,0,true,0,0,ideal_width,ideal_height,0,0,ideal_width,ideal_height,0,0,0,0,-1);
    room_set_view_enabled(i,true);
  }
}

window_set_size(ideal_width,ideal_height);
display_set_gui_size(ideal_width,ideal_height);
surface_resize(application_surface,ideal_width*zoom,ideal_height*zoom);
  
alarm[0]=1;
room_goto(room_next(room));

//Font
global.fnt_menu = font_add_sprite_ext(fnt_grem,"!'#$%()*,-./0123456789:;&lt;=&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}.?+",0,0);
global.fnt_Ui = font_add_sprite_ext(fnt_ui_new,"!'#$%()*,-./0123456789:;&lt;=&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}.?+",0,0);
//global.fnt_boxy = font_add_sprite_ext(fnt_ui_new,"!*+,-./0123'456789:;&lt;=#&gt;?@abcdefg$hijklmnopq%rstuvwxyz[&amp;\]^_'`(){|}~",0,0);

//Keybinds
global.key_jump = ord("W");
global.key_left = ord("A");
global.key_right = ord("D");
global.key_down = ord("S");
global.key_inven = ord("F");
global.key_craft = ord("C");
global.key_interact = ord("E");
global.key_quick_heal = ord("Q");
global.key_1 = ord("1");
global.key_2 = ord("2");
global.key_3 = ord("3");
global.key_4 = ord("4");
global.key_5 = ord("5");
global.key_6 = ord("6");
global.key_7 = ord("7");





//Other globals
globalvar tutorialComplete,music,tip_controls,tip_tools,tip_battery,tip_shifting,music_volume,sfx_volume,vsyncToggled,performance_mode;
tutorialComplete = false;
tip_controls = false; //Whether or not the controls tip has been displayed.
tip_tools = false; //Whether or not the "tools tutorial" tips has been displayed.
tip_battery = true; //Whether or not the energy/power tip has been displayed.
tip_shifting = false; //Whether or not the region shifting tip has been displayed.
music_volume = 0.4;
music = audio_play_sound(snd_theStarsForever,10,true);
audio_sound_gain(snd_theStarsForever,music_volume,0);
sfx_volume = 0.4;
vsyncToggled = true;
performance_mode = false; //THE FUTURE IS NOW! AGDTP RUNNING ON Average American Home 1.1 GHz CPU PCs IS A REALITY! (not)


//Item IDs
enum ITEMID
{
    nil,
    item_dirtClump,
    weapon_greenSword,
    weapon_starter,
    pickaxe_starter,
    pickaxe_greenPickaxe, //5
    tile_packedDirt,
    tile_workbench,
    item_stonePiece,
    item_stick,
    item_copperOre,
    weapon_weakBow,
    tile_copperTurret,
    tile_ladder,
    cons_gremTalisman,
    item_gremEssence,
    tile_platform,
    cons_bomb,
    tile_packedStone,
    weapon_subLimeMachineGun,
    item_modTag,
    tile_modBench,
    tile_woodenStilt,
    item_acorn,
    weapon_sphereLauncher,
    pickaxe_stingerDrill,
    weapon_beemerang,
    acc_ultrablueStar,
    tile_battery,
    acc_satchel,
    acc_beehiveBackpack,
    cons_treeFruit,
    weapon_acornRifle,
    item_sweetComb,
    acc_copperChestplate,
    item_seashellMetal,
    tile_beeTurret,
    tile_rebarRailgun,
    tile_grillBlock,
    weapon_waterGun,
    tile_copperBlock,
    weapon_seashellSpear,
    pickaxe_seashellPickaxe,
    weapon_sandySeadollar
}

//Item Types
enum ITEMTYPE
{
    def,
    weapon,
    pickaxe,
    playertile,
    consumable,
    accessory,
}

enum ACHIEVEMENT
{
    getting_dirty, //Collected Dirt (recipe unlock)-
    first_blood, //Killed your first enemy-
    sharpened_blade, //Crafted a weapon
    prepared_to_delve, //Crafted a pickaxe
    starter_base, //Placed a few blocks in the flatlands.-
    geared_up, //Equipped an accessory.
    
    
    rusty_tools, //Collected Copper Ore-
    beached, //Collected Seashell Metal Ore-
    
    impenetrable, //Placed 100 blocks in the flatlands.-
    stalwart_creation, //Placed 10000 blocks in the flatlands.-
    new_world, //Region shifted
    avant_garde, //Used a tag on a tool.
    
    explosive_gremlin, //Killed the Bomb King
    triple_king, //Killed the Sphere King
    the_king_of_lesser_things, //Killed Nilmerg
    the_king_of_sky_and_sea, //Killed Bliplo
    speedrunner_1, //Killed Nilmerg on wave 1
    speedrunner_2, //Killed Bliplo by wave 3
    the_king_of_everything, //Get every achievement.
    //RECIPE UNLOCKS
    last,
}
globalvar achievements_unlocked;
achievements_unlocked = array_create(ACHIEVEMENT.last);

//Particles
globalvar particle_system,_part_gib,part_dirt_frag,part_stone_frag,part_nullGib,part_esc;
particle_system = part_system_create();


//####################NOTE: Partilce types should be destroyed when not needed. If many particles are used in the future, be sure to destroy them later.

//- gib particles

_part_gib = part_type_create();
part_type_sprite(_part_gib, spr_gib,false,false,true);
part_type_scale(_part_gib, 1, 1);
part_type_size(_part_gib, 0.1, 0.3, 0, 0.05);
part_type_colour1(_part_gib, c_white);
part_type_alpha1(_part_gib, 1);
part_type_speed(_part_gib, 1, 2, 0, 0);
part_type_direction(_part_gib, 90, 90, 0, 0);
part_type_gravity(_part_gib, 0.20, 270);
part_type_orientation(_part_gib, 0, 0, choose(4,-4), 0, 1);
part_type_blend(_part_gib, false);
part_type_life(_part_gib, 10, 25);

//- nullGib particles
part_nullGib = part_type_create();
part_type_sprite(part_nullGib, spr_nullGib,false,false,true);
part_type_size(part_nullGib, 0.3, 1, 0, 0);
part_type_scale(part_nullGib, 1, 1);
part_type_colour1(part_nullGib, c_white);
part_type_alpha1(part_nullGib, 1);
part_type_speed(part_nullGib, 2, 3, 0, 0);
part_type_direction(part_nullGib, 0, 180, 0, 0);
part_type_gravity(part_nullGib, 0.20, 270);
part_type_orientation(part_nullGib, 0, 0, choose(4,-4), 0, 1);
part_type_blend(part_nullGib, false);
part_type_life(part_nullGib, room_speed, room_speed*3);

//- dirt particles
part_dirt_frag = part_type_create();
part_type_sprite(part_dirt_frag, spr_tile_frag_dirt,false,false,true);
part_type_size(part_dirt_frag, 0.3, 1, -0.01, 0);
part_type_scale(part_dirt_frag, 1, 1);
part_type_colour1(part_dirt_frag, c_white);
part_type_alpha1(part_dirt_frag, 1);
part_type_speed(part_dirt_frag, 1, 1.4, 0, 0);
part_type_direction(part_dirt_frag, 0, 180, 0, 0);
part_type_gravity(part_dirt_frag, 0.15, 270);
part_type_orientation(part_dirt_frag, 0, 0, irandom_range(2,-2), 0, 1);
part_type_blend(part_dirt_frag, false);
part_type_life(part_dirt_frag, 45, room_speed);

//- stone particles
part_stone_frag = part_type_create();
part_type_sprite(part_stone_frag, spr_tile_frag_stone,false,false,true);
part_type_size(part_stone_frag, 0.3, 1, -0.01, 0);
part_type_scale(part_stone_frag, 1, 1);
part_type_colour1(part_stone_frag, c_white);
part_type_alpha1(part_stone_frag, 1);
part_type_speed(part_stone_frag, 1, 1.4, 0, 0);
part_type_direction(part_stone_frag, 0, 180, 0, 0);
part_type_gravity(part_stone_frag, 0.15, 270);
part_type_orientation(part_stone_frag, 0, 0, irandom_range(2,-2), 0, 1);
part_type_blend(part_stone_frag, false);
part_type_life(part_stone_frag, 45, room_speed);

//- essence trail
part_esc = part_type_create();
part_type_sprite(part_esc, spr_ui_essence,false,false,true);
part_type_scale(part_esc, 1, 1);
part_type_size(part_esc, 0.1, 0.3, 0, 0.05);
part_type_colour1(part_esc, c_white);
part_type_alpha1(part_esc, 1);
part_type_speed(part_esc, 0.3, 0.8, 0, 0.1);
part_type_direction(part_esc, 0, 180, 0, 0);
part_type_gravity(part_esc, 0, 0);
part_type_orientation(part_esc, 0, 0, choose(4,-4), 0, 1);
part_type_blend(part_esc, false);
part_type_life(part_esc, 8, 15);

//Gameplay globals and player stats
globalvar mainQuest,energyMax,energyRegenRate,accessories_equipped,tileLevel,tileRegenRate;
energyMax = 5; //Maximum amount of energy in storage.
energyRegenRate = 1; //Energy gained per second.
mainQuest = 0; //Progress on the main storyline. 0 = tutorial.
tileLevel = 0; //Percentage to increase a tile's maximum HP when placed.
tileRegenRate = 0; //How fast a tile's HP is regenerated.

accessories_equipped = ds_list_create();

//- recipes
globalvar recipe_copperOre,recipe_sweetComb,recipe_seashellMetal;
recipe_copperOre = false;
recipe_sweetComb = false;
recipe_seashellMetal = false;

//- currency
globalvar currency_essence;
currency_essence = 0;

//Surface
alarm[1] = 1;

//Tracking variables
global.kills = 0;
global.base_tiles_placed = 0; //How many tiles have been placed on the flatlands.
global.waves_survived = 0;
global.tiles_mined = 0;
global.items_crafted = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delayed Surface resize
var w = display_get_width()*2;
var h = display_get_height()*2;

surface_resize(application_surface,w,h);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center window
window_center();

print(window_get_width());
print(window_get_height());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free surfaces
if instance_exists(hudControl) &amp;&amp; surface_exists(hudControl.menu_surface)
{
    surface_free(hudControl.menu_surface);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zoom = 1;
window_set_fullscreen(!window_get_fullscreen());
alarm[0]=1;
alarm[1]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zoom = 1;
window_set_size(display_get_width(),display_get_width());
alarm[0]=1;
alarm[1]=1;

if window_get_fullscreen() == true
{
    window_set_fullscreen(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="113">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zoom = 2;

window_set_size(ideal_width*zoom,ideal_height*zoom);
alarm[0]=1;
alarm[1]=1;

if window_get_fullscreen() == true
{
    window_set_fullscreen(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zoom = 1;
window_set_size(ideal_width*zoom,ideal_height*zoom);
alarm[0]=1;
alarm[1]=1;

if window_get_fullscreen() == true
{
    window_set_fullscreen(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
