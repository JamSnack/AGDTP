<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gremlinWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>GR_ENEMY</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the Gremlin

canActiveRegion = true;
canHurt = true;
hp = 20;
image_speed = 15/60;
state = WANDER;
stunned = false;

vsp = 0;
atkBox = 32; //divided by 2 on calculation.
damage = 10; //Attack damage.

hurtAlarm = 1;

target = obj_pie; //Target priority.
if interm == false then target = obj_pie;

objective = target;
stateLockAlarm = 2;
aggroRange = 16*2;

stateLock = true;
alarm[stateLockAlarm] = 20;

gremBlockCol = true;

image_xscale = sign(target.x-x);

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset state lock
stateLock = false;

objective = target;
state = MOVE;
image_index = sign(objective.x-x);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset hurt
canHurt = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canHurt == false then state = MOVE;
var canSeeTarget = !collision_line(x,y,target.x,target.y,OBSTA,false,false);
var plrTileAggroRange = 16*4;

//Gremlin Ai
if stateLock == false
{
    if canSeeTarget 
    { state = MOVE; objective = target; }
    else
    {
        //Player Tile Aggro logic
        //Magic number '9': sprite width - center = 8, then add 1.
        var plrTile = instance_nearest(x+(9*image_xscale),y,PLRTILE);
        
        if instance_exists(PLRTILE)
        { if plrTile.canHurt == false then plrTile = instance_nearest(plrTile.x,plrTile.y,PLRTILE); }
        
        if distance_to_object(plrTile) &lt;= plrTileAggroRange
        {
            objective = plrTile;
            state = MOVE; 
        } else if position_meeting(x,y+plrTileAggroRange,PLRTILE)
        {
            objective = instance_position(x,y+plrTileAggroRange,PLRTILE);
            state = MOVE;
        }
        else objective = obj_pie;
    }
    
    //Player Aggro Logic
    if target == obj_pie
    {
        if distance_to_object(obj_player) &lt;= aggroRange &amp;&amp; obj_player.dead == false
        &amp;&amp; !collision_line(x,y,obj_player.x,obj_player.y,OBSTA,false,true)
        { objective = obj_player; } 
         else 
        { state = MOVE; stateLock = true; alarm[stateLockAlarm] = 20; }
    }
}
if instance_exists(objective) 
{ ai_gremlin(state,spr_gremlinIdle,spr_gremlinJump,spr_gremlinWalk,1,objective,-4,atkBox); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_text(x,y,string(state));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
