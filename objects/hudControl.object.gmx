<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar maxInvenSlots,hudVisible;
hudVisible = true;

image_speed = 30/60;

//Inventory
/*NOTE: If the hitboxes for the inventory need to be updated in the future,
    define them here and update them in here, because each event having a local
    set of inventory coordinates is very annoying to update :P.
*/

invOpen = false;
invenXMax = 125;
invenX = 0;
maxInvenSlots = 28;
cursorHoldItem = false;
cursorItem = noone;
cursorAmt = noone;
cursorSlot = noone;
cursorTags = noone;
selectedSlot = noone;
drawCursorItem = false;
d_click = false;
equippedSlot_weapon = 0;
equippedSlot_pickaxe = 1;
pickupTimer = 0; //When right clicking a slot - how long until multiple items will be taken.
pickupTimerMax = 30; //The interval when a single item will be taken out of a slot.
pickupTimerRate = 10;
craftTimer = 0;
craftTimerMax = 35;
craftTimerRate = 5;
equipQueue = noone;
drawn_essence = currency_essence; //The number of essence show to the player. Approaches currency_essence


//Super Menu
showSuperMenu = false;
ui_state = "CRAFT"; // No ui is visible
esc_hue = 0;
esc_subimage = 0;
essence_color = c_white;

//Wave Menu
enemySprites = ds_list_create();
cursor_information = "";

//Crafting Menu
craftIndex = -1; //The CRAFTING ID of the item to craft
craftSelect = -1; //Which crafting slot has its information displayed.
craftBuffer = 0; //Last Item crafted
drawn_crafting_slots = 0; //Used to synchronize slots when drawing the crafting menu.
cost = 0; //essence cost

//- crafting filters. Whether or not to filter out an item of a specific type.
craft_filter_resources = false;
craft_filter_weapon = false;
craft_filter_pickaxe = false;
craft_filter_cons = false;
craft_filter_plrtile = false;
craft_filter_acc = false;
craft_scroll = 0;

//Mod Menu
selectedTag = noone;
selectedEquipment = noone;
selectedType = noone;
equipmentIcon = noone;
equipmentTags = noone;
modCanConfirm = false;

//Inventory Slots
maxInvenSlots_original = maxInvenSlots;

//- initialize array length to avoid memory error.
inventorySlotIcon[maxInvenSlots-1] = 0;
inventorySlotAmt[maxInvenSlots-1] = 0;
inventorySlotType[maxInvenSlots-1] = 0;
inventorySlotTags[maxInvenSlots-1] = noone; //Each slot has '2' tag slots.

trashSlotIcon = 0;
trashSlotAmt = 0;
trashSlotType = 0;
trashSlotTags = noone; //Each slot has '2' tag slots.

last_hotkey = 0;


for (i=0;i&lt;maxInvenSlots;i++)
{
    inventorySlotIcon[i] = 0; //Nothing
    inventorySlotAmt[i] = 0; //No items
    inventorySlotType[i] = 0; //Default item. '1' for equippable tool.
    inventorySlotTags[i] = noone; //No tags
}

//Settings menu
settingsMenu = false; //Whether settings menu is visible or not.
showPopMessage = true; //Whether or not to use popMessages.
showTaskList = true; //Show the player's tasks.
showBackground = true;
musicToggled = true; // Music is on!
keybindMenu_visible = false; //SHOW YA KEYBINDS BIFF
input_wait = false; //Whether or not to wait for an input.
music_drag = false;

//Place Tiles
lastPlaceX = noone;
lastPlaceY = noone;

//Betwixt menus
upgradeMenu_visible = false;
shopMenu_visible = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset crafting slots
currentCraftingSlots = 0;
craftingSpriteSet = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == rm_menu then exit;

if invOpen == true
    { if invenX &lt; invenXMax then invenX += (invenXMax-invenX)*0.2; } 
else { if invenX &gt;= -10 then invenX += (0-invenX)*0.2; }
    
//Fire equipment queue
if equipQueue != noone &amp;&amp; instance_exists(obj_player) &amp;&amp; obj_player.toolReady == true
{
    scr_slotEquip(equipQueue);
    equipQueue = noone;
}

//---Cursor information---
var enemy_on_cursor = false;

if instance_exists(ENEMY)
{
    var size = 2;
    var _e = collision_circle(mouse_x,mouse_y,size,ENEMY,false,true);
    
    if _e
    {
        cursor_information = string(_e.hp)+"/"+string(_e.maxHp); //scr_enemyHpIndex(_e.object_index)
        enemy_on_cursor = true;
        
    } else cursor_information = "";
    
} else cursor_information = "";

//--------SUPER MENU---------
if showSuperMenu == true 
{
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    var dx = device_mouse_x_to_gui(0);
    var dy = device_mouse_y_to_gui(0);

    //--Crafting tool tip-------
    if ui_state == "CRAFT"
    {
        
        if point_in_rectangle(dx,dy,_posX,_posY,250+_posX,200+_posY)
        {   
            var drawn_slots = 0;
            
            for(i=0;i&lt;sprite_get_number(spr_itemDrops);i++)
            {
                if scr_checkCraftingIndex(i) == true &amp;&amp; scr_checkCraftingType(i) != false
                {
                    var size = 35; //The size of the distance between slots - the actual size of the slots.
                    var column = 7;
                    var c = floor(drawn_slots/column);
                    
                    var x1 = _posX+10+(drawn_slots*size)-(c*size*column);
                    var x2 = _posX+30+(drawn_slots*size)-(c*size*column);
                    var y1 = _posY+5+(size*c)+craft_scroll;
                    var y2 = _posY+25+(size*c)+craft_scroll;
                    
                    if (y1 &lt; _posY || y2 &gt; _posY+sprite_get_height(spr_ui_superMenuBackground)) 
                    { 
                        drawn_slots += 1;
                        continue; 
                    }
                    
                    //Get Crafting ID of slot
                    if point_in_rectangle(dx,dy,x1,y1,x2,y2) &amp;&amp; i != craftSelect
                    { craftSelect = i; audio_play_sound(snd_inventoryClick,1,false); }
                    
                    drawn_slots += 1;
                }
                
                //reset draw_crafting_slots
                if i == sprite_get_number(spr_itemDrops)-1 then drawn_slots = 0;
            }
        }
    }
    //ENEMY INFORMATION
    else if ui_state == "WAVE"
    {
        for (_p=0;_p&lt;ds_list_size(enemySprites);_p++)
        {
            var _sprite = enemySprites[| _p];
            
            
            if sprite_exists(_sprite) &amp;&amp; point_in_rectangle(dx,dy,_posX+20+(_p*22),_posY+105+14,_posX+40+(_p*22),_posY+105+34)
            {
                cursor_information = scr_getEnemyInfo(_sprite);
                break;
            } else cursor_information = "";
        }
    } else cursor_information = "";
}

//---------Update inventory size if needed----------
var array_size = array_length_1d(inventorySlotIcon);

show_debug_message("array_size: "+string(array_size));

if maxInvenSlots &gt; array_size
{
    //- reinitialize the array
    inventorySlotIcon[maxInvenSlots-1] = 0;
    inventorySlotAmt[maxInvenSlots-1] = 0;
    inventorySlotType[maxInvenSlots-1] = 0;
    inventorySlotTags[maxInvenSlots-1] = noone; //Each slot has '2' tag slots.
    
    for (i=array_size;i&lt;maxInvenSlots;i++)
    {
        inventorySlotIcon[i] = 0; //Nothing
        inventorySlotAmt[i] = 0; //No items
        inventorySlotType[i] = 0; //Default item. '1' for equippable tool.
        inventorySlotTags[i] = noone; //No tags
    }
}
else if maxInvenSlots &lt; array_size
{
    //If we lose slots, reallocate the affected items
    for(z=array_size-(array_size-maxInvenSlots);z&lt;array_size;z++)
    {
    
        if hudControl.inventorySlotIcon[z] != ITEMID.nil
        {
            //Remove the item and re-add it to the inventory.
            var _item = hudControl.inventorySlotIcon[z];
            var _amt = hudControl.inventorySlotAmt[z]; 
            var _type = hudControl.inventorySlotType[z]; 
            var _tags = hudControl.inventorySlotTags[z];

            //Unequip a removed accessory
            if _type == ITEMTYPE.accessory
            {
                for(g=0;g&lt;ds_list_size(accessories_equipped);g++)
                {
                    if _item == accessories_equipped[| g]
                    {
                        scr_applyAccessory(_item);
                    }
                }
            }
            
            //Clear the slot
            scr_clearSlot(z);
            
            //Reallocate the item
            if scr_invenAddItem(_item,_amt,_type,_tags) == -1
            {
                scr_dropItem(_item,_amt,_type,obj_player.x,obj_player.y,_tags);
            }
        }
    }
}


//-----------KEY INTERACTION----------------
if input_wait == false &amp;&amp; (settingsMenu == false &amp;&amp; keybindMenu_visible == false)
{
    if keyboard_check_released(global.key_inven)
    {
        //- Toggle Inventory Visibility.
        invOpen = !invOpen;
        
        if invOpen == false &amp;&amp; selectedSlot != noone
        {
            last_hotkey = selectedSlot;
            event_user(1);
        }
    }
    
    else if keyboard_check_released(global.key_craft)
    {
        ///Toggle crafting menu
        showSuperMenu = !showSuperMenu;
        
        if instance_exists(gameControl)
        { if currentTask == 1 then currentTask = 2; }
        
            
        //init mod bench
        event_user(0);
    }
    else if (keyboard_check_released(global.key_1))
    {
        last_hotkey = 0;
        event_user(1);
    }
    else if (keyboard_check_released(global.key_2))
    {
        last_hotkey = 1;
        event_user(1);
    }
    else if (keyboard_check_released(global.key_3))
    {
        last_hotkey = 2;
        event_user(1);
    }
    else if (keyboard_check_released(global.key_4))
    {
        last_hotkey = 3;
        event_user(1);
    }
    else if (keyboard_check_released(global.key_5))
    {
        last_hotkey = 4;
        event_user(1);
    }
    else if (keyboard_check_released(global.key_6))
    {
        last_hotkey = 5;
        event_user(1);
    }
    else if (keyboard_check_released(global.key_7))
    {
        last_hotkey = 6;
        event_user(1);
    }
}

//--------------KEYBINDING-----------------
else if input_wait == true &amp;&amp; keyboard_key != 0 &amp;&amp; keyboard_key != vk_escape &amp;&amp; keyboard_key != vk_f1 &amp;&amp; keyboard_key != vk_f2 &amp;&amp; keyboard_key != vk_f3 &amp;&amp; keyboard_key != vk_f4 &amp;&amp; keyboard_key != vk_f5
{
    if global.key_jump == noone
    { global.key_jump = keyboard_key; }
    else if global.key_left == noone
    { global.key_left = keyboard_key; }
    else if global.key_right == noone
    { global.key_right = keyboard_key; }
    else if global.key_down == noone
    { global.key_down = keyboard_key; }
    else if global.key_inven == noone
    { global.key_inven = keyboard_key; }
    else if global.key_craft == noone
    { global.key_craft = keyboard_key; }
    else if global.key_interact == noone
    { global.key_interact = keyboard_key; }
    else if global.key_quick_heal == noone
    { global.key_quick_heal = keyboard_key; }
    
    input_wait = false;
}

//-------Animate Essence Icon Element----
esc_hue += 1;
if esc_hue &gt; 240 then esc_hue = 0;

essence_color = make_colour_hsv(esc_hue,170,240);
esc_subimage += 1/8;

if esc_subimage &gt; 8 then esc_subimage = 0;

//- drawn_essence approaches currency_essence!
if drawn_essence != currency_essence
{
    if !(wave == 0 &amp;&amp; world_Time &lt; 20)
    {
        if drawn_essence &lt; currency_essence
        {
            audio_play_sound(snd_essence_get,3,false);
            audio_sound_pitch(snd_essence_get,choose(0.9,1,1.1));
        }
        
    }

    var essence_difference = abs(currency_essence-drawn_essence);
    drawn_essence = round(approach(drawn_essence,currency_essence,essence_difference*0.1));
    
    if essence_difference &lt; 10 then drawn_essence = currency_essence;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ui_state == "CRAFT" &amp;&amp; showSuperMenu == true
{
    //----------MOVE THE SLOTS DOWN------
    craft_scroll -= 5;

    
    //----------SCROLL LIMIT--------
    var total_slots = 0;
    
    //- calculate number of visible crafting icons to determine scroll limit.
    for(i=0;i&lt;sprite_get_number(spr_itemDrops);i++)
    {
        if scr_checkCraftingIndex(i) == true &amp;&amp; scr_checkCraftingType(i) != false
        {
            total_slots += 1;
        }
    }
    
    
    var limit = floor(total_slots/7)*24;
    
    if craft_scroll &gt; limit then craft_scroll = limit;
}
else
{
    //Scroll wheel hotkey equip
    if last_hotkey &gt;= 0 &amp;&amp; last_hotkey &lt;= 6
    {
        last_hotkey += 1;
        
        if last_hotkey &gt; 6 then last_hotkey = 0;
        event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ui_state == "CRAFT" &amp;&amp; showSuperMenu == true
{
    //----------MOVE THE SLOTS UP------
    craft_scroll += 5;

    
    //----------SCROLL LIMIT--------
    var total_slots = 0;
    
    //- calculate number of visible crafting icons to determine scroll limit.
    for(i=0;i&lt;sprite_get_number(spr_itemDrops);i++)
    {
        if scr_checkCraftingIndex(i) == true &amp;&amp; scr_checkCraftingType(i) != false
        {
            total_slots += 1;
        }
    }
    
    
    var limit = -floor(total_slots/7)*24;
    
    if craft_scroll &lt; limit then craft_scroll = limit;
}
else
{
    //Scroll wheel hotkey equip

    if last_hotkey &gt;= 0 &amp;&amp; last_hotkey &lt;= 6
    {
        last_hotkey -= 1;
        
        if last_hotkey &lt; 0 then last_hotkey = 6;
        event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pickupTimerMax = 30;
pickupTimer = 28;
pickupTimerRate = 2;

var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

//Hotbar+inventory coordinates
if !point_in_rectangle(dx,dy,0,50-45,invenX,200) &amp;&amp; showSuperMenu == false
{
    if cursorHoldItem == true
    { scr_invenRemoveItem(cursorItem,cursorAmt,cursorType,true,cursorSlot,cursorTags); }
    
    cursorHoldItem = false;
    cursorItem = noone;
    cursorAmt = noone;
    cursorSlot = noone;
    cursorType = noone;
    cursorTags = noone;
}
else 
{ 
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    var size = 16;
    var xOff = 70;
    var yOff = 100;
    var x1 = (_posX)-size+xOff;
    var y1 = (_posY)-size+yOff;
    var x2 = (_posX)+size+xOff;
    var y2 = (_posY)+size+yOff;
    
    if (showSuperMenu == true &amp;&amp; ui_state == "MOD")
    {
        //Clear mod slots
        //- Tag Slot
        if point_in_rectangle(dx,dy,x1,y1,x2,y2)
        {
            selectedTag = noone;
            modCanConfirm = false;
        }
        else if point_in_rectangle(dx,dy,x1+50,y1,x2+50,y2)
        {
            //-Equipment Slot
            selectedEquipment = noone;
            selectedType = noone;
            equipmentTags = noone;
            equipmentIcon = 0;
            modCanConfirm = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ui Interactions
if room == rm_menu then exit;

var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

//-------------Super Menu UI State buttons-----------------
if showSuperMenu == true
{
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    
    var _craftOn, _modOn, _upgradeOn, _waveOn, offset;
    
    _craftOn = 0;
    _modOn = 0;
    _upgradeOn = 0;
    _waveOn = 0;
    offset = -4;
    
    var menu_width = 280;
    
    if ui_state == "CRAFT" then _craftOn = offset;
    else if ui_state == "MOD" then _modOn = offset;
    else if ui_state == "UPGRADE" then _upgradeOn = offset;
    else if ui_state == "WAVE" then _waveOn = offset;
    
    //Menu buttons
    if point_in_rectangle(dx,dy,_posX-15+_craftOn-10+menu_width,_posY+10-10,_posX-15+_craftOn+10+menu_width,_posY+10+10)
    {
        ui_state = "CRAFT";
    }
    else if point_in_rectangle(dx,dy,_posX-15+_modOn-10+menu_width,_posY+35-10,_posX-15+_modOn+10+menu_width,_posY+35+10)
    {
        ui_state = "MOD";
    }
   /* else if point_in_rectangle(dx,dy,_posX-15+_upgradeOn-10,_posY+60-10,_posX-15+_upgradeOn+10,_posY+60+10)
    {
        ui_state = "UPGRADE";
    }*/
    else if point_in_rectangle(dx,dy,_posX-15+_waveOn-10+menu_width,_posY+60-10,_posX-15+_waveOn+10+menu_width,_posY+60+10)
    {
        ui_state = "WAVE";
    }
    
    //Crafting Menu Filters
    if ui_state == "CRAFT"
    {
        //Filters
        var _ico_scale = 0.8;
        var _y_offset = 14;
        var enabled_offset = 4;
        
        if point_in_rectangle(dx,dy,_posX+140-8,_posY-_y_offset+(enabled_offset*craft_filter_resources)-8,_posX+140+(8),_posY-_y_offset+(enabled_offset*craft_filter_resources)+(8))
        {
            craft_filter_resources = !craft_filter_resources;
            craft_scroll = 0;
        }
        else if point_in_rectangle(dx,dy,_posX+158-8,_posY-_y_offset+(enabled_offset*craft_filter_weapon)-8,_posX+158+(8),_posY-_y_offset+(enabled_offset*craft_filter_weapon)+(8))
        {
            craft_filter_weapon = !craft_filter_weapon;
            craft_scroll = 0;
        }
        else if point_in_rectangle(dx,dy,_posX+176-8,_posY-_y_offset+(enabled_offset*craft_filter_pickaxe)-8,_posX+176+(8),_posY-_y_offset+(enabled_offset*craft_filter_pickaxe)+(8))
        {
            craft_filter_pickaxe = !craft_filter_pickaxe;
            craft_scroll = 0;
        }
        else if point_in_rectangle(dx,dy,_posX+194-8,_posY-_y_offset+(enabled_offset*craft_filter_plrtile)-8,_posX+194+(8),_posY-_y_offset+(enabled_offset*craft_filter_plrtile)+(8))
        {
            craft_filter_plrtile = !craft_filter_plrtile;
            craft_scroll = 0;
        }
        else if point_in_rectangle(dx,dy,_posX+212-8,_posY-_y_offset+(enabled_offset*craft_filter_cons)-8,_posX+212+(8),_posY-_y_offset+(enabled_offset*craft_filter_cons)+(8))
        {
            craft_filter_cons = !craft_filter_cons;
            craft_scroll = 0;
        }
        else if point_in_rectangle(dx,dy,_posX+230-8,_posY-_y_offset+(enabled_offset*craft_filter_acc)-8,_posX+230+(8),_posY-_y_offset+(enabled_offset*craft_filter_acc)+(8))
        {
            craft_filter_acc = !craft_filter_acc;
            craft_scroll = 0;
        }
    }
    //Region Shifting
    else if ui_state == "WAVE"
    {
        if room == rm_zero
        {
            //-- region button hitbox definition
            for(_p=0;_p&lt;sprite_get_number(spr_ui_regions);_p++)
            {
                if point_in_rectangle(dx,dy,_posX+20+(_p*38),_posY+30,_posX+20+(_p*38)+35,_posY+30+35)
                {
                    var r_shift = true;
                    var s_destination = "";
                    
                    //Region shift
                    switch _p
                    {
                        //No region!
                        case 0:
                        {
                            r_shift = false;  
                        }
                        break;
                        
                        //Grasslands region!
                        
                        case 1:
                        {
                            s_destination = "GRASSLANDS"; 
                        }
                        break;
                        
                        //Coral Cove region!
                        case 2:
                        {
                            if kingDied_1 == true { s_destination = "COVE"} else r_shift = false;
                        }
                        break;
                    }
                    
                    worldControl.region_shift = r_shift;
                    worldControl.shift_destination = s_destination;
                }
            }
        }
    }
}

//---------- MOD BENCH FUNCTIONALITY ---------------

if cursorHoldItem == true &amp;&amp; ui_state == "MOD" &amp;&amp; showSuperMenu == true
{
    //The dimensions of the menu's slots, as defined in the draw event.
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    var size = 16;
    var xOff = 70;
    var yOff = 100;
    var x1 = (_posX)-size+xOff;
    var y1 = (_posY)-size+yOff;
    var x2 = (_posX)+size+xOff;
    var y2 = (_posY)+size+yOff;
    
    //-- Tag Slot
    if (cursorItem == ITEMID.item_modTag) &amp;&amp; point_in_rectangle(dx,dy,x1,y1,x2,y2)
    {
        selectedTag = cursorTags;
    }
    
    //-- Equipment Slot
    if cursorType != ITEMTYPE.def &amp;&amp; (cursorType == ITEMTYPE.weapon || cursorType == ITEMTYPE.pickaxe) &amp;&amp; point_in_rectangle(dx,dy,x1+50,y1,x2+50,y2)
    {
        selectedEquipment = cursorItem;
        selectedType = cursorType;
        equipmentIcon = cursorItem;
        equipmentTags = cursorTags;
    }
    
    //-- Activate confirmation
    if selectedEquipment != noone &amp;&amp; selectedTag != noone
    {
        modCanConfirm = true;
    }
}
else if showSuperMenu == true &amp;&amp; ui_state == "MOD"
{
    //-- Create new item
    //The dimensions of the menu's slots, as defined in the draw event.
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    var size = 16;
    var xOff = 70;
    var yOff = 100;
    var x1 = (_posX)-size+xOff;
    var y1 = (_posY)-size+yOff;
    var x2 = (_posX)+size+xOff;
    var y2 = (_posY)+size+yOff;
    
    if modCanConfirm == true &amp;&amp; point_in_rectangle(dx,dy,x1+110,y1,x2+110,y2)
    {
        //Create a ds_list to store the new tag inside.
        if !ds_exists(equipmentTags,ds_type_list)
        { equipmentTags = ds_list_create(); }
        
        //If tags are less than max tags, add one!
        var tags_maxxed = false;
        
        if ds_list_size(equipmentTags) &lt; 2
        {   
            //Remove the old weapon, then append the tag to the recycled ds list.
            scr_invenRemoveItem(selectedEquipment,-1,selectedType,false,-1,equipmentTags);
            ds_list_add(equipmentTags,selectedTag[| 0]); 
        
            //Remove the ingredient tag.
            scr_invenRemoveItem(ITEMID.item_modTag,1,ITEMTYPE.def,false,-1,selectedTag);
        }
        else 
        {
            scr_hudMessage("Only 2 tags allowed per item.",global.fnt_Ui,5,0,c_red,0);
            tags_maxxed = true;
        }
        
        
        //Reset if successful
        if tags_maxxed == false &amp;&amp; scr_invenAddItem(selectedEquipment,0,selectedType,equipmentTags) != -1
        {
            scr_hudMessage("Modification success!",global.fnt_Ui,5,equipmentIcon,c_aqua,0);
            
            event_user(0); //Reset the mod bench.
            
            scr_playSound(snd_modificationSuccess,false,10,obj_player.x,obj_player.y,1,false);
        } 
        else 
        {
            scr_hudMessage("Modification failed.",global.fnt_Ui,5,0,c_red,0);
            event_user(0); //Reset the mod bench.
        }
    }
}
//--------- TRASH SLOT --------------------------
if cursorHoldItem == true
{
    var x1 = 106/(invenXMax/invenX);
    var y1 = 4+(16*ceil(maxInvenSlots/7));

    if cursorSlot != "trashSlot" &amp;&amp; (cursorItem != ITEMID.nil &amp;&amp; cursorItem != trashSlotIcon || ( cursorItem == trashSlotIcon &amp;&amp; cursorAmt == trashSlotAmt)) &amp;&amp; point_in_rectangle(dx,dy,x1,y1,x1+10,y1+10)
    {
        trashSlotIcon = cursorItem;
        trashSlotType = cursorType;
        trashSlotAmt = cursorAmt;
        trashSlotTags = cursorTags;
        
        //variable reset
        scr_invenRemoveItem(cursorItem,cursorAmt,cursorType,false,cursorSlot,cursorTags);
        
        //check for accessory
        if cursorType == ITEMTYPE.accessory
        {
            var _size = ds_list_size(accessories_equipped)
            
            for(n=0;n&lt;_size;n++)
            {
                //dequip the accessory
                if cursorItem == accessories_equipped[| n]
                {
                    scr_applyAccessory(cursorItem);
                }
            }
        }
        
        cursorHoldItem = false;
        cursorItem = noone;
        cursorAmt = noone;
        cursorSlot = noone;
        cursorType = noone;
        cursorTags = noone;
        selectedSlot = noone;
    }
}

//--------- UPGRADE MENU INTERACTIONS ------------
if showSuperMenu == true &amp;&amp; ui_state == "UPGRADE"
{
        var _posX = viewWidth/2-120;
        var _posY = viewHeight/2-105;
        
        //- INIT BUTTONS
        //NOTE: COORDINATES AND VARIABLES SHOULD BE 1:1 WITH WHAT IS IN THE DRAW GUI EVENT :)
        var h_size = 36;
        var v_size = 12;
        var xx = 8+h_size;
        var yy = 8+v_size;
        
        //- Tile Regen Rate
        if point_in_rectangle(dx,dy,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy)
        {
            scr_buyUpgrade("TILE_REGEN");
        }
        
        //- Tile Level
        var xx = 8+h_size;
        var yy = 40+v_size;
        
        if point_in_rectangle(dx,dy,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy)
        {
            scr_buyUpgrade("TILE_LEVEL");
        }
        
        //- Electricity storage
        var xx = 8+h_size;
        var yy = 72+v_size;
        
        if point_in_rectangle(dx,dy,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy)
        {
            scr_buyUpgrade("POWER_STORAGE");
        }
       
}


//--------- INVENTORY INTERACTIONS -------------

for (i=0;i&lt;maxInvenSlots;i++)
{
    //inventory slots
    var column = 7;
    var c = floor(i/column);
    
    var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
    var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
    var y1 = -45+(16*c);
    var y2 = -35+(16*c);
    
    //Hotbar slots
    var x3 = (10+(i*16));
    var x4 = (20+(i*16));
    var y3 = -45;
    var y4 = -35;

    if cursorHoldItem == true
    {
        
        
        //---------- SET AN ITEM IN A SLOT -----------------------------
        
        if (point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4))
        {
        
        //-----------------------------Copy current item and place in old slot if need be.----------------------------
            if i != cursorSlot
            {
                //Trash slot interaction
                if cursorSlot == "trashSlot"
                {
                    var _invItem = 0; var _invAmt= 0; var _invType = 0; var _invTags = 0;
                    
                    if inventorySlotIcon[i] != ITEMID.nil
                    {
                        _invItem = inventorySlotIcon[i];
                        _invAmt = inventorySlotAmt[i];
                        _invType = inventorySlotType[i];
                        _invTags = inventorySlotTags[i];
                    }
                    
                    //Place item in new slot
                    cursorHoldItem = false;
                    inventorySlotIcon[i] = cursorItem;
                    inventorySlotAmt[i] = cursorAmt;
                    inventorySlotTags[i] = cursorTags;
                    inventorySlotType[i] = cursorType;
                    
                    //Reallocate a replaced item slot.
                    if _invItem != undefined
                    {
                        scr_invenAddItem(_invItem,_invAmt,_invType,_invTags);
                    }
                    
                    selectedSlot = noone;
                    pickupTimer = 0;
                    pickupTimerMax = 60;
                    
                    scr_clearSlot("trashSlot");
                    
                    //Reset variables before script exit
                    cursorHoldItem = false;
                    cursorItem = noone;
                    cursorAmt = noone;
                    cursorSlot = noone;
                    cursorType = noone;
                    cursorTags = noone;
                    selectedSlot = noone;
                    
                    exit;
                }
            
            //- Replace slots with cursor item.
                //-- Case: The new slot is the same item &amp; can be stacked.
                if inventorySlotIcon[i] == cursorItem &amp;&amp; inventorySlotAmt[i] &gt; 0 &amp;&amp; inventorySlotTags[i] == cursorTags //0 AMT means an item cannot be stacked, otherwise it would be 1.
                {  
                    //-Update the slot previously picked up.
                        //-- Case: the old slot will have no AMT left.
                    if inventorySlotAmt[cursorSlot]-cursorAmt == 0
                    { 
                        scr_clearSlot(cursorSlot);
                    } 
                    else //Case: the old slot will have left-over items.
                    { inventorySlotAmt[cursorSlot] = inventorySlotAmt[cursorSlot]-cursorAmt; }
                   
                    //Update amount in cursor 
                    cursorAmt += inventorySlotAmt[i];
                    
                } 
                else if inventorySlotIcon[i] != 0
                {
                    //Remove items to prevent deletion
                    if cursorAmt != inventorySlotAmt[cursorSlot]
                    {
                        scr_invenRemoveItem(inventorySlotIcon[cursorSlot],
                                            inventorySlotAmt[cursorSlot]-cursorAmt,
                                            inventorySlotType[cursorSlot],
                                            true,cursorSlot,inventorySlotTags[cursorSlot]);
                    }
                
                    //Copy current slot and update the cursorSlot.
                    inventorySlotIcon[cursorSlot] = inventorySlotIcon[i];
                    inventorySlotAmt[cursorSlot] = inventorySlotAmt[i];
                    inventorySlotType[cursorSlot] = inventorySlotType[i];
                    inventorySlotTags[cursorSlot] = inventorySlotTags[i];
                }
                else
                {
                    if inventorySlotAmt[cursorSlot]-cursorAmt == 0
                    {
                        inventorySlotIcon[cursorSlot] = 0;
                        inventorySlotType[cursorSlot] = 0;
                        inventorySlotAmt[cursorSlot] = 0;
                        inventorySlotTags[cursorSlot] = noone;
                    } 
                    else
                    { inventorySlotAmt[cursorSlot] = inventorySlotAmt[cursorSlot]-cursorAmt; }
                }
    
                
                //Place item in new slot
                cursorHoldItem = false;
                inventorySlotIcon[i] = cursorItem;
                inventorySlotType[i] = cursorType;
                inventorySlotAmt[i] = cursorAmt;
                inventorySlotTags[i] = cursorTags;
                
                selectedSlot = noone;
                pickupTimer = 0;
                pickupTimerMax = 60;
                pickupTimerRate = 4;
                
                //Reset variables
                cursorHoldItem = false;
                cursorItem = noone;
                cursorAmt = noone;
                cursorSlot = noone;
                cursorType = noone;
                cursorTags = noone;
                
                exit;
            }
        } else if i == cursorSlot &amp;&amp; (showSuperMenu == false &amp;&amp; ui_state != "MOD") &amp;&amp; !point_in_rectangle(dx,dy,0,50-45,invenX,200) { scr_invenRemoveItem(cursorItem,cursorAmt,cursorType,true,cursorSlot,cursorTags); selectedSlot = noone; break; }
    }
    
    
    
    //----------------Click to select a slot-------------------
    if (point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) || ( i &lt; column &amp;&amp; point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4)))
     &amp;&amp; obj_player.toolReady == true
    {
        scr_slotEquip(i);
        break;
    }
}


//Ensure variable reset
cursorHoldItem = false;
cursorItem = noone;
cursorAmt = noone;
cursorSlot = noone;
cursorType = noone;
cursorTags = noone;


///Crafting timer reset
craftTimer = 0;
craftTimerMax = 40;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Settings interactions
var xx = display_get_gui_width()/2;
var yy = display_get_gui_height()/2;
var mx = device_mouse_x_to_gui(0);
var my = device_mouse_y_to_gui(0);
var hbox = 4;

if settingsMenu = true
{   
    //Show Pop Messages
    
    //- settings
    //-- In this case, xx-40 and yy-40 are constants denoting the center of the selectionBool sprite.
    if point_in_rectangle(mx,my,xx-40-hbox,yy-40-hbox,xx-40+hbox,yy-40+hbox)
    { showPopMessage = !showPopMessage; }
    
    //- Debug mode
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-30-hbox,xx-40+hbox,yy-30+hbox)
    { dev = !dev; show_debug_overlay(dev); }
    
    //- toggle background
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-20-hbox,xx-40+hbox,yy-20+hbox)
    { 
        showBackground = !showBackground;
        performance_mode = !showBackground;
        background_visible[2] = showBackground;
        background_visible[3] = showBackground;
        background_visible[4] = showBackground;
        background_visible[5] = showBackground;
    }
    
    //Keybinds
    else if point_in_rectangle(mx,my,xx-40-hbox,yy+20-hbox,xx-40+hbox,yy+20+hbox)
    {
        keybindMenu_visible = true;
        settingsMenu = false;
    }
    
    //Vsync
    else if point_in_rectangle(mx,my,xx-40-hbox,yy+30-hbox,xx-40+hbox,yy+30+hbox)
    {
        vsyncToggled = !vsyncToggled;
        display_reset(0,vsyncToggled);
    }
    
    //- Exit button
    else if point_in_rectangle(mx,my,xx-20,yy+40,xx+20,yy+63)
    {
        //Save the game
        scr_saveGame();
    
        scr_roomTransition("WARP",choose("Come back soon!","Loading...","Good Game"),global.fnt_menu,c_white,rm_menu);
    }
    
    //UPDATE MUSIC VOLUME - SLIDER LOGIC IN Left Button EVENT!
    audio_sound_gain(music,musicToggled*music_volume,0);
    music_drag = false;
}
else if keybindMenu_visible == true
{
    //-Movement keys
    //-- Jump
    if point_in_rectangle(mx,my,xx-40-hbox,yy-40-hbox,xx-40+hbox,yy-40+hbox)
    {
        global.key_jump = noone;
        input_wait = true;
    }
    
    //- left
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-30-hbox,xx-40+hbox,yy-30+hbox)
    {
        global.key_left = noone;
        input_wait = true;
    }
    
    //- right
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-20-hbox,xx-40+hbox,yy-20+hbox)
    {
        global.key_right = noone;
        input_wait = true;
    }
    
    //- down
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-10-hbox,xx-40+hbox,yy-10+hbox)
    {
        global.key_down = noone;
        input_wait = true;
    }
    
    //- inventory
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-hbox,xx-40+hbox,yy+hbox)
    {
        global.key_inven = noone;
        input_wait = true;
    }
    
    //- crafting
    else if point_in_rectangle(mx,my,xx-40-hbox,yy+10-hbox,xx-40+hbox,yy+10+hbox)
    {
        global.key_craft = noone;
        input_wait = true;
    }
    
    //- interact
    else if point_in_rectangle(mx,my,xx-40-hbox,yy+20-hbox,xx-40+hbox,yy+20+hbox)
    {
        global.key_interact = noone;
        input_wait = true;
    }
    
    //- quick heal
    else if point_in_rectangle(mx,my,xx-40-hbox,yy+30-hbox,xx-40+hbox,yy+30+hbox)
    {
        global.key_quick_heal = noone;
        input_wait = true;
    }
    
    //- Back button
    else if point_in_rectangle(mx,my,xx-20,yy+40,xx+20,yy+50)
    {
        keybindMenu_visible = false;
        settingsMenu = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slot interaction - single item
var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

var hotbarOffset = -45;

//Hotbar and inventory interaction

if invOpen == true
{
    if point_in_rectangle(dx,dy,0,50+hotbarOffset,invenX,200)
    {
        if cursorHoldItem = false
        {
            for (i=0;i&lt;28;i++)
            {
                //inventory slots
                var column = 7;
                var c = floor(i/column);
                
                var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
                var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
                var y1 = -45+(16*c);
                var y2 = -35+(16*c);
                
                //Hotbar slots
                var x3 = (10+(i*16));
                var x4 = (20+(i*16));
                var y3 = -45;
                var y4 = -35;
                
                //Interaction
                if point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) &amp;&amp; cursorHoldItem == false &amp;&amp; inventorySlotAmt[i] &gt; 0
                || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4) &amp;&amp; cursorHoldItem == false &amp;&amp; inventorySlotAmt[i] &gt; 0
                {
                    cursorHoldItem = true;
                    cursorItem = inventorySlotIcon[i];
                    cursorAmt = 1;
                    cursorType = inventorySlotType[i];
                    cursorSlot = i;
                    cursorTags = inventorySlotTags[i];
                    
                    break;
                }
            }
        } 
        else
        {
            pickupTimer += 1;
            if pickupTimer &gt;= pickupTimerMax
            {
                if cursorAmt &lt; inventorySlotAmt[cursorSlot]
                { cursorAmt += 1; }
                pickupTimer = 0;
                pickupTimerRate += 2;
                if pickupTimerMax &gt; 0 then pickupTimerMax -= pickupTimerRate;
            }
        }
        
        //Draw slot and cursor embelishments
        if cursorSlot != noone
        {
            selectedSlot = cursorSlot;
            drawCursorItem = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI &amp; SETTINGS INTERACTION
if room == rm_menu then exit;

if showSuperMenu == true &amp;&amp; obj_player.dead == false
{
    if ui_state == "CRAFT"
    {
        var _posX = viewWidth/2-120;
        var _posY = viewHeight/2-105;
        var dx = device_mouse_x_to_gui(0);
        var dy = device_mouse_y_to_gui(0);
        var drawn_slots = 0;
        
            //This function represents the crafting menu as a whole.
        if point_in_rectangle(dx,dy,_posX,_posY,250+_posX,200+_posY)
        {   
            for(i=0;i&lt;sprite_get_number(spr_itemDrops);i++)
            {
                if scr_checkCraftingIndex(i) == true &amp;&amp; scr_checkCraftingType(i) != false
                {
                    var size = 35; //The size of the distance between slots - the actual size of the slots.
                    var column = 7;
                    var c = floor(drawn_slots/column);
                    
                    var x1 = _posX+10+(drawn_slots*size)-(c*size*column);
                    var x2 = _posX+30+(drawn_slots*size)-(c*size*column);
                    var y1 = _posY+5+(size*c)+craft_scroll;
                    var y2 = _posY+25+(size*c)+craft_scroll;
                    
                    //If not on-screen then continue
                    if (y1 &lt; _posY || y2 &gt; _posY+sprite_get_height(spr_ui_superMenuBackground)/2) 
                    { 
                        drawn_slots += 1;
                        continue; 
                    }
                    
                    //Get Crafting ID of slot
                    if point_in_rectangle(dx,dy,x1,y1,x2,y2)
                    { 
                        craftIndex = i; //Current itemID. 
                        craftSelect = i; //Current information
                        
                        if craftTimer == 0 
                        { scr_craftItem(i); }
                        
                        break; 
                    } else { craftIndex = -1; craftSelect = -1; }
                    
                    drawn_slots += 1;
                }
            }
            
            craftTimer += 1;
            
            if craftTimer &gt;= craftTimerMax &amp;&amp; scr_checkCraftingIndex(craftIndex) == true &amp;&amp; scr_checkCraftingType(craftIndex) != false
            {
                craftTimer = 1;
                
                if craftTimerMax &gt; 5 then craftTimerMax -= craftTimerRate;
                if craftIndex != -1// &amp;&amp; craftTimer &gt; craftTimerMax 
                { 
                    scr_craftItem(craftIndex);
                    craftSelect = craftIndex;
                    craftBuffer = craftIndex;
                } 
            }
            
        } else if ui_state != "MOD" { craftIndex = -1; }
    } else { craftIndex = -1; }
}
//NardNuts
else if settingsMenu = true
{   
//NOTE: This bit of settings menu logic controls things that aren't simple toggles. Hence the left button event and not left button down.

    var xx = display_get_gui_width()/2;
    var yy = display_get_gui_height()/2;
    var mx = device_mouse_x_to_gui(0);
    var my = device_mouse_y_to_gui(0);
    var hbox = 4;

    //- Music volume
    if point_in_rectangle(mx,my,xx-30,yy-2-hbox,xx+30,yy+2+hbox) || music_drag == true
    {
        music_drag = true;
    
        var point_1 = xx-30;
        var point_2 = xx+30;
        
        music_volume = clamp((mx-point_1)/(point_2-point_1),0,1);
        
        //AUDIO CHANGE FUNCTION IS IN Left Button Released!!!
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slot interaction
var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

var hotbarOffset = -45;

//Hotbar and inventory interaction

if invOpen == true
{
    if point_in_rectangle(dx,dy,0,50+hotbarOffset,invenX,200)
    {
        if cursorHoldItem = false &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; obj_player.toolReady == true
        {
            //---- TRASH SLOT-----
            var x1 = 106/(invenXMax/invenX);
            var y1 = 4+(16*ceil(maxInvenSlots/7));

            if point_in_rectangle(dx,dy,x1,y1,x1+10,y1+10)
            {
                cursorHoldItem = true;
                cursorItem = trashSlotIcon;
                cursorType = trashSlotType;
                cursorAmt = trashSlotAmt;
                cursorTags = trashSlotTags;
                cursorSlot = "trashSlot";
            }
            
            //--- INVENTORY SLOTS ---
            for (i=0;i&lt;maxInvenSlots;i++)
            {
                //inventory slots
                var column = 7;
                var c = floor(i/column);
                
                var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
                var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
                var y1 = -45+(16*c);
                var y2 = -35+(16*c);
                
                //Hotbar slots
                var x3 = (10+(i*16));
                var x4 = (20+(i*16));
                var y3 = -45;
                var y4 = -35;
                
                //Interaction
                if point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) &amp;&amp; cursorHoldItem == false || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4) &amp;&amp; cursorHoldItem == false
                {
                    cursorHoldItem = true;
                    cursorItem = inventorySlotIcon[i];
                    cursorAmt = inventorySlotAmt[i];
                    cursorType = inventorySlotType[i];
                    cursorSlot = i;
                    cursorTags = inventorySlotTags[i];
                    break;
                }
            }
        }
        
        //Draw slot and cursor embelishments
        if cursorSlot != noone
        {
            selectedSlot = cursorSlot;
            drawCursorItem = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place blocks
if room == rm_lobby || (settingsMenu == true || keybindMenu_visible == true) then exit;

var xx = round(mouse_x/16)*16;
var yy = round(mouse_y/16)*16;

if (lastPlaceX != xx || lastPlaceY != yy) &amp;&amp; selectedSlot != noone
{
    for(i=0;i&lt;maxInvenSlots;i++)
    {
        //inventory slots
        var column = 7;
        var c = floor(i/column);
        
        var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
        var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
        var y1 = 5+(16*c);
        var y2 = 15+(16*c);
        
        //Hotbar slots
        var x3 = (10+(i*16));
        var x4 = (20+(i*16));
        var y3 = -15;
        var y4 = -5;
    
        //------------------Place Blocks-------------------------------------
        if i == selectedSlot
        {
            //The whole hotbar section.
            var _x1 = 10;
            var _x2 = 10+(7*16);
        
            if showSuperMenu == false &amp;&amp; !point_in_rectangle(dx,dy,_x1,50+y3,_x2,50+y4) &amp;&amp; cursorHoldItem == false
            {
                if inventorySlotType[selectedSlot] == 3 &amp;&amp; obj_player.tool == 3
                {
                    var _tile = scr_invenTileIndex(inventorySlotIcon[selectedSlot]);
                    var _amt = inventorySlotAmt[selectedSlot];
                    
                    //Single place
                    if (!position_meeting(xx,yy,OBSTA) &amp;&amp; !position_meeting(xx,yy,NOCOL) || position_meeting(xx,yy,obj_woodenStilt) &amp;&amp; !position_meeting(xx,yy,OBSTA)) 
                    &amp;&amp; !(object_get_parent(_tile) == PLR_NOCOL &amp;&amp; position_meeting(xx,yy,NOCOL))
                    &amp;&amp; point_distance(obj_player.x,obj_player.y,mouse_x,mouse_y) &lt;= 16*4 //3 tiles worth of distance.
                    &amp;&amp; (isConnected(xx,yy) || isGrounded(xx,yy)) //|| collision_point(xx,yy+16,obj_platform,false,false) )
                    &amp;&amp; !collision_rectangle(xx-8,yy-8,xx+8,yy+8,obj_player,false,true) 
                    &amp;&amp; !collision_rectangle(xx-8,yy-8,xx+8,yy+8,ENEMY,false,true)
                    &amp;&amp; !position_meeting(xx,yy+2,obj_pie)
                    {
                        if _amt &gt; 0
                        {
                            instance_create(xx,yy,_tile);
                            scr_tileUpdate(xx,yy);
                            scr_invenRemoveItem(0,1,3,false,selectedSlot,noone);
                            if _amt == 0 then selectedSlot = noone;
                            lastPlaceX = xx;
                            lastPlaceY = yy;
                            
                            //Sound
                            if position_meeting(xx,yy+16,FLATLAND)
                            {
                                scr_playSound(snd_dirt_break,false,8,xx,yy,1,true);
                            }
                            else scr_playSound(snd_stone_break,false,8,xx,yy,1,true);
                            
                            
                            break;
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hotkey event
if room == rm_menu || (settingsMenu == true || keybindMenu_visible == true) then exit;

if obj_player.toolReady == true
{
    selectedSlot = last_hotkey;
    scr_slotEquip(last_hotkey);
    
    //Reset building
    lastPlaceX = 0;
    lastPlaceY = -16;
} else equipQueue = last_hotkey;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Mod Bench

selectedEquipment = noone;
selectedType = noone;
equipmentIcon = 0;
equipmentTags = noone;
selectedTag = noone;
modCanConfirm = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == rm_menu || hudVisible == false then exit;

///Draw Ui
draw_set_color(c_white);
var dispWidth = viewWidth;
var dispHeight = viewHeight;
var menu_height = sprite_get_height(spr_ui_superMenuBackground);

var mx = device_mouse_x_to_gui(0);
var my = device_mouse_y_to_gui(0);

if dev == true then draw_text(10,20,"FPS: "+string(fps)+"FPS_REAL: "+string(fps_real));

//--------------------Super Menu Control----------------------

if showSuperMenu == true
{
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    draw_set_font(global.fnt_Ui);
    
    //Draw background
    draw_sprite(spr_ui_superMenuBackground,0,_posX,_posY);

    //Draw menu content
    switch ui_state
    {
        case "CRAFT":
        {
            //-----------------Crafting Menu---------------------------------------
            //#region
        
            if craft_scroll &gt; 0
            {
                draw_sprite(spr_white_arrow_small,1,_posX-10,_posY+10);
            }
            else if craft_scroll &lt; 0
            {
                draw_sprite(spr_white_arrow_small,0,_posX-10,_posY+10);
            }
            
            //- draw filters
            var _ico_scale = 0.8;
            var _y_offset = 14;
            var enabled_offset = 4;;
            
            draw_sprite_ext(spr_menuIcons,0,_posX+140,_posY-_y_offset+(enabled_offset*craft_filter_resources),_ico_scale,_ico_scale,0,c_white,1);
            draw_sprite_ext(spr_menuIcons,1,_posX+158,_posY-_y_offset+(enabled_offset*craft_filter_weapon),_ico_scale,_ico_scale,0,c_white,1);
            draw_sprite_ext(spr_menuIcons,2,_posX+176,_posY-_y_offset+(enabled_offset*craft_filter_pickaxe),_ico_scale,_ico_scale,0,c_white,1);
            draw_sprite_ext(spr_menuIcons,3,_posX+194,_posY-_y_offset+(enabled_offset*craft_filter_plrtile),_ico_scale,_ico_scale,0,c_white,1);
            draw_sprite_ext(spr_menuIcons,4,_posX+212,_posY-_y_offset+(enabled_offset*craft_filter_cons),_ico_scale,_ico_scale,0,c_white,1);
            draw_sprite_ext(spr_menuIcons,5,_posX+230,_posY-_y_offset+(enabled_offset*craft_filter_acc),_ico_scale,_ico_scale,0,c_white,1);
            
            draw_set_font(global.fnt_menu);
            
            if (craft_filter_resources &amp;&amp; craft_filter_weapon &amp;&amp; craft_filter_pickaxe &amp;&amp; craft_filter_plrtile &amp;&amp; craft_filter_cons &amp;&amp; craft_filter_acc)
            {
                draw_text(_posX+50,_posY+20,"No crafting filters selected.");
            }
            
            //Draw crafting recipe tooltip box
            draw_nineSliceBox(spr_ui_9slice_small,_posX+8,_posY+menu_height/2,_posX+238,_posY+menu_height-27,0);
            
            //Recipe scroll instructions
            draw_text(_posX-10,_posY+menu_height+10,"Use the scroll wheel to scroll through multiple recipes");
            draw_set_font(global.fnt_Ui);
            //draw crafting buttons
            var drawn_slots = 0;
            
            for(i=0;i&lt;sprite_get_number(spr_itemDrops);i++)
            {
            
                if scr_checkCraftingIndex(i) == true &amp;&amp; scr_checkCraftingType(i) != false
                {
                    var size = 35; //The size of the distance between slots - the actual size of the slots.
                    var column = 7;
                    var c = floor(drawn_slots/column);
                    
                    var x1 = _posX+10+(drawn_slots*size)-(c*size*column);
                    var x2 = _posX+30+(drawn_slots*size)-(c*size*column);
                    var y1 = _posY+5+(size*c)+craft_scroll;
                    var y2 = _posY+25+(size*c)+craft_scroll;
                    
                    //If not on-screen then continue
                    if (y1 &lt; _posY || y2 &gt; _posY+menu_height/2) 
                    { 
                        drawn_slots += 1;
                        continue;
                    }

                    //Draw Slots
                    draw_sprite(spr_ui_craftingIcon,0,x1,y1);
                    
                    //Draw items
                    var _center = 12;
                    draw_sprite(spr_itemDrops,i,x1+_center,y1+_center);
                    
                    //Draw crafting tooltip
                    if craftSelect != -1// &amp;&amp; craftSelect == i
                    {
                        scr_craftingToolTip(craftSelect); //initializes text and recipe variables and sets recipe varialbes
                        scr_drawToolTip(craftSelect,scr_checkCraftingType(craftSelect),true); //initializes and sets text variables
                        
                        
                        text[1] = scr_fitText(text[1],58);
                         
                        draw_text_transformed(132,134,text[0],1.25,1.25,0);
                        draw_text_transformed(133,145,text[1],0.8,0.8,0);
                        draw_text(133,185,"Items Needed: ");
                        
                        //draw cost
                        if cost &gt; 0
                        {
                            draw_sprite_ext(spr_ui_essence,esc_subimage,_posX+208,137,1,1,0,essence_color,1);
                            
                            if currency_essence &gt;= cost then draw_set_color(c_white) else draw_set_color(c_red);
                            
                            draw_text(_posX+213,134,"x"+string(cost));
                            draw_set_color(c_white);
                        }
                        
                        //- Draw material sprites.
                        for(_i=0;_i&lt;array_length_1d(mats);_i++)
                        {
                            var column = floor(_i/2);
                            var y_offset = _i*10;
                            var x_offset = (column*32)+5
                            var _scal = 0.5;
                            var y_pos = 196;
                            
                            y_pos -= column*y_offset;
                            
                            
                            draw_sprite_ext(spr_itemDrops,mats[_i],133+x_offset,y_pos+y_offset+2,_scal,_scal,0,c_white,1);
                            if matsAmt[_i] &gt; 0 then draw_text(135+x_offset,y_pos+y_offset,"x"+string(matsAmt[_i]));
                        }
                    }
                    
                    drawn_slots += 1;
                }
            }
    //#endregion
        }
        break;
    
        /*case "UPGRADE":
        {
    //-----------------Upgrade Menu-----------------------------
    //#region
        //- INIT BUTTONS
        var h_size = 36;
        var v_size = 12;
        
        //NOTE: Adding 32 to the y value every new button
        //- Regeneration Upgrade button
        var xx = 8+h_size;
        var yy = 8+v_size;
        
        draw_nineSliceBox(spr_ui_button,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy,0);
        draw_text((_posX-2.25*string_length("Regen Level"))+xx,_posY-(v_size/2)+yy,"Regen Level#Cost: "+string(tileRegenRate*25));
        draw_text_transformed(_posX+(xx*2)+5,_posY-(v_size/2)+yy,"Increase the rate at which the#player, pie, and tile's#health regenerates during the day.#Regeneration Level: "+string(60-(60-tileRegenRate)),0.75,0.75,1);
        
        //- Tile base HP Upgrade button
        var xx = 8+h_size;
        var yy = 40+v_size;
        
        draw_nineSliceBox(spr_ui_button,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy,0);
        draw_text((_posX-2.5*string_length("Tile Level"))+xx,_posY-(v_size/2)+yy,"Tile Level#Cost: "+string(tileLevel*50));
        draw_text_transformed(_posX+(xx*2)+5,_posY-(v_size/2)+yy,"Increase tile strength and#amount regenerated.#Tile Level: "+string(tileLevel),0.75,0.75,1);
        
        //- Electricity storage
        var xx = 8+h_size;
        var yy = 72+v_size;
        
        draw_nineSliceBox(spr_ui_button,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy,0);
        draw_text((_posX-2.5*string_length("Power Storage"))+xx,_posY-(v_size/2)+yy,"Power Storage#Cost: "+string((energyMax-4)*100));
        draw_text_transformed(_posX+(xx*2)+5,_posY-(v_size/2)+yy,"Increases power storage capacity.#Max capacity: "+string(energyMax),0.75,0.75,1);
        
        //Draw essence count
        var str_essence = ":"+string(scr_getInvenItemAmt(ITEMID.item_gremEssence));
        
        draw_sprite(spr_gremlinEssence,image_index,3*_posX-string_width(str_essence),_posY+190);
        draw_text(3*_posX+4-string_width(str_essence),_posY+186,str_essence);
        
        }
        break;*/
        
        case "MOD":
        {
            //-------Mod menu-----
            var size = 16;
            var xOff = 70;
            var yOff = 100;
            var x1 = (_posX)-size+xOff;
            var y1 = (_posY)-size+yOff;
            var x2 = (_posX)+size+xOff;
            var y2 = (_posY)+size+yOff;
            
            draw_set_font(global.fnt_Ui);
            var _text = "Modify your tools and equipment with Mod Tags. Drag a Mod Tag from your inventory into the slot on the left and a tool you want to modify into the slot on the right. Click on the result to consume the tool and the tag and create a new, modified tool!"
            _text = scr_fitText(_text,45);
            
            draw_text(_posX+10,_posY+10,_text);
            
            //Slot labels
            draw_text(x1+3,y1-10,"Mod Tag");
            draw_text(x1+53,y1-10,"Tool");
            draw_text(x1+113,y1-10,"Result");
            
            //Tag and Equipment Slots respectively
            draw_nineSliceBox(spr_ui_9slice_small,x1,y1,x2,y2,0);
            draw_nineSliceBox(spr_ui_9slice_small,x1+50,y1,x2+50,y2,0);
            
            //Draw icons
            if selectedTag != noone 
            { 
                draw_sprite(spr_itemDrops,ITEMID.item_modTag,(x1+x2)/2,(y1+y2)/2);
                if ds_exists(selectedTag,ds_type_list)
                { draw_text(((x1+x2)/2)-13,((y1+y2)/2)+25,ds_list_find_value(selectedTag,0)); }
            }
            
            if selectedEquipment != noone 
            { 
                draw_sprite(spr_itemDrops,equipmentIcon,(x1+x2+100)/2,(y1+y2)/2);
            } //Magic Number: 50+50 = 100; 50 is MN for equip slot placement within the slot.
            
            //Draw mod complete
            draw_nineSliceBox(spr_ui_modConfirm,x1+110,y1,x2+110,y2,modCanConfirm);
            
            if modCanConfirm == true
            {
                draw_sprite(spr_itemDrops,equipmentIcon,(x1+x2+220)/2,(y1+y2)/2);
            }
        }
        break;
        
        //#endregion
        case "WAVE":
        {
           //------REGION SHIFTING----------
           var region_shift = worldControl.region_shift;
           var region_type = worldControl.shift_destination;
           
            draw_nineSliceBox(spr_ui_9slice_small,_posX+10,_posY+20,_posX+226,_posY+20+65,0);
            draw_sprite(spr_ui_regionShiftBool,region_shift,_posX+12,_posY+13);
            
            //-- draw region buttons
            for(_p=0;_p&lt;sprite_get_number(spr_ui_regions)-1;_p++)
            {
                var _subimage = _p;
                
                switch _p
                {
                    //Region requirements
                    case 2: { if kingDied_1 == false then _subimage = 3; } break;
                }
            
                draw_sprite(spr_ui_regions,_subimage,_posX+20+(_p*38),_posY+30);
            }
            
            //-- cost
            if region_shift == true
            {
                var str = "Essence Cost: ";
                
                switch region_type
                {
                    case "GRASSLANDS": { draw_sprite(spr_ui_regionSelected,0,_posX+20+38,_posY+30); } break;
                    case "COVE": { draw_sprite(spr_ui_regionSelected,0,_posX+20+76,_posY+30); } break;
                }
                
                draw_text(_posX+153,_posY+10,str+string(scr_getRegionCost(region_type)));
            }
            else
            {
                draw_text(_posX+153,_posY+10,"Essence Cost: 0");
                draw_sprite(spr_ui_regionSelected,0,_posX+20,_posY+30);
            }
           
           //-----ENEMY INFORMATION--------
           draw_text(_posX+12,_posY+97,"Enemies: ");
           draw_nineSliceBox(spr_ui_9slice_small,_posX+10,_posY+105,_posX+226,_posY+105+65,0);
           
           //--- Draw the enemy information
           if room != rm_lobby
           {
                for (_p=0;_p&lt;ds_list_size(enemySprites);_p++)
                {
                    var _sprite = object_get_sprite(enemySprites[| _p]);
                    
                    if sprite_exists(_sprite)
                    {
                        var scale = 1;
                        var _sprite_width = sprite_get_width(_sprite);
                        var _sprite_height = sprite_get_height(_sprite);
                        
                        while sprite_get_width(_sprite)/scale &gt; 20 || sprite_get_height(_sprite)/scale &gt; 20
                        {
                            scale += 0.2;
                        }
                        
                        draw_sprite(spr_ui_enemyBackground,0,_posX+30+(_p*22),_posY+105+24);
                        draw_sprite_ext(_sprite,image_index/2,_posX+30+(_p*22),_posY+105+22,1/scale,1/scale,0,c_white,1);
                    }
                }
           }
           
           //------DIFFICULTY/BOSSES KILLED--------------
           draw_text(_posX+12,_posY+178,"Bosses: ")
           
           if kingDied_1 == true
           {
               draw_sprite(spr_bossDefeatedIcon,0,_posX+50,_posY+182);
           }
           
           if kingDied_2 == true
           {
               draw_sprite(spr_bossDefeatedIcon,1,_posX+60,_posY+182);
           }
        }
    }
    
    //-----------------Draw Ui state buttons--------
    //Drawing them underneath the menu for overlapping effect.
    
    var _craftOn, _modOn, _upgradeOn, _waveOn, offset;
    _craftOn = 0;
    _modOn = 0;
    _upgradeOn = 0;
    _waveOn = 0;
    offset = -4;
    
    var menu_width = 280;
    
    if ui_state == "CRAFT" then _craftOn = offset;
    else if ui_state == "MOD" then _modOn = offset;
    else if ui_state == "UPGRADE" then _upgradeOn = offset;
    else if ui_state == "WAVE" then _waveOn = offset;
    
    draw_sprite(spr_menuIcons,6,_posX-15+_craftOn+menu_width,_posY+10); //Crafting menu
    draw_sprite(spr_menuIcons,7,_posX-15+_modOn+menu_width,_posY+35); //Mod menu
    //draw_sprite(spr_menuIcons,8,_posX-15+_upgradeOn,_posY+60); //Upgrade menu
    draw_sprite(spr_menuIcons,9,_posX-15+_waveOn+menu_width,_posY+60); //Wave menu

}

//----------------Draw Inventory -----------------------------------------
//#region
if invenX &gt; 1 &amp;&amp; instance_exists(obj_player)
{
    var invenX_scale = (invenX/invenXMax);

    //Inventory background
    //draw_set_alpha(0.9);
    //draw_nineSliceBox(spr_ui_9slice,-10,20,invenX,200,0);
    
    var draw_tooltip = false;
    var column = 7;
    
    if selectedSlot != noone &amp;&amp; selectedSlot != "trashSlot"
    {
        //later redefined in the for loop
        var c = floor(selectedSlot/column); 
        var x1 = (10+(selectedSlot*16)-(c*16*column))*invenX_scale;
        var x2 = (20+(selectedSlot*16)-(c*16*column))*invenX_scale;
        var y1 = -45+(16*c)+50;
        var y2 = -35+(16*c)+50;
        
        if point_in_rectangle(mx,my,x1,y1,x2,y2)
        {
            draw_tooltip = true;
        }
    }
    
    // -- Inventory slots layer 1 --
    for (i=0;i&lt;maxInvenSlots;i++)
    {
        var hotbarCount = 7;
        var c = floor(i/column);
        
        if i &lt; hotbarCount
        {
            var x1 = (10+(i*16));
            var x2 = (20+(i*16));
            var y1 = -45;
            var y2 = -35;
        } else
        {
            var x1 = (10+(i*16)-(c*16*column))*invenX_scale;
            var x2 = (20+(i*16)-(c*16*column))*invenX_scale;
            var y1 = -45+(16*c);
            var y2 = -35+(16*c);
        }
        
        var inv_amt = inventorySlotAmt[i];
        
                
        //Draw slots
        draw_set_alpha(1);
        draw_sprite_ext(spr_ui_invenSlot,0,x1,50+y1,0.6,0.6,0,c_white,1);
        
        //Draw selection
        if selectedSlot != noone &amp;&amp; i == selectedSlot
        {
            draw_sprite_ext(spr_selectedSlot,image_speed,x1,50+y1,0.6,0.6,0,c_white,1);
        }
        
        //Draw item icon
        var _center = 6; //Center the sprite onto the slot
        draw_sprite_ext(spr_itemDrops,inventorySlotIcon[i],x1+_center,50+y1+_center,0.4,0.4,0,c_white,1);
        
        
        //-- inventory slots layer two --
        
        draw_set_font(global.fnt_Ui);
        
        //Draw item amount
        if inv_amt &gt; 0 
        {
            var str = string(inv_amt);
            
            if inv_amt &gt;= 1000
            {
                str = string_delete(str,2,3);
                str += "k";
            }
            
            draw_text_transformed(x2-9,y2+47.5,str,0.5,0.5,0);
        }
    }
    
    //Draw tooltip
    if draw_tooltip == true &amp;&amp; selectedSlot != noone &amp;&amp; selectedSlot != "trashSlot"
    {
        scr_drawToolTip(inventorySlotIcon[selectedSlot],inventorySlotType[selectedSlot],false);
        
        text[1] = scr_fitText(text[1],30);
        
        var _text = text[0]+"##"+text[1]+"##"+text[2];
        var _text_length = string_width(_text);
        
        draw_set_font(global.fnt_menu);
        draw_text_transformed(6-(-(_text_length*invenX_scale)+_text_length),2+(16*ceil(maxInvenSlots/7)),_text,0.8,0.8,0);
    }
    
    //- Draw Trash Slot
    var _center = 6; //Center the sprite onto the slot
    var x1 = 106/(invenXMax/invenX);
    var y1 = 4+(16*ceil(maxInvenSlots/7));
    //- slot
    draw_sprite_ext(spr_ui_trashSlot,0,x1,y1,0.6,0.6,0,c_white,1);
    //- item
    draw_sprite_ext(spr_itemDrops,trashSlotIcon,x1+_center,y1+_center,0.5,0.5,0,c_white,1);
    //- amt
    if trashSlotAmt &gt; 0 then draw_text_transformed(x1+4,y1+8,string(trashSlotAmt),0.75,0.75,0);
    
}

//-Draw equipped accessories
if ds_exists(accessories_equipped,ds_type_list)
{
    var list_size = ds_list_size(accessories_equipped);
    
    if list_size &gt; 0
    {
        for(m=0;m&lt;list_size;m++)
        {
            var accessory = accessories_equipped[| m];
            draw_sprite_ext(spr_itemDrops,accessory,viewWidth-10,50+14*m,0.75,0.75,0,c_white,max(0.25,invenX/invenXMax));
        }
    }
}

//----------------Draw Hotbar-----------------------
if invenX &lt;= 5
{

    ///--Layer One--
    for (i=0;i&lt;7;i++)
    {
        var scale = 0.4;
        if selectedSlot == i then scale = 0.65;
        
    
        var x1 = (10+(i*16));
        var x2 = (20+(i*16));
        var y1 = -45;
        var y2 = -35;
        
        var inv_amt = inventorySlotAmt[i];
        
        //Draw hotbar slots
        draw_sprite_ext(spr_ui_invenSlot,0,x1,50+y1,0.6,0.6,0,c_white,1);
        draw_set_alpha(1);
        
        //Draw hotbar selection
        if selectedSlot != noone &amp;&amp; i == selectedSlot
        { draw_sprite_ext(spr_selectedSlot,image_index,x1,50+y1,0.6,0.6,0,c_white,1); }
        
        //Draw hotbar item icon
        var _center = 6;
        draw_sprite_ext(spr_itemDrops,inventorySlotIcon[i],x1+_center,50+y1+_center,scale,scale,0,c_white,1);
        
        //Draw hotbar item amount (numbers)
        draw_set_font(global.fnt_Ui);
        
        if inv_amt != 0
        {
            if inv_amt &gt; 999
            {
                inv_amt = scr_convertToCompressedString(inv_amt);
            }
            
            draw_text_transformed(x2-9,y2+47.5,string(inv_amt),0.5,0.5,0);
        }
    }
}
//#endregion
    
//-----Draw cursor item
//#region
if cursorHoldItem == true &amp;&amp; drawCursorItem == true
{
    //-Draw item
    draw_sprite_ext(spr_itemDrops,cursorItem,mx,my,0.75,0.75,0,c_white,1);
    
    //-Draw item amount
    if cursorAmt &gt; 0 
    {
        draw_text(mx-8,my+4,string(cursorAmt));
    }
    
    
    //-- Draw item tags
    if cursorTags != undefined
    {
        if ds_exists(cursorTags,ds_type_list)
        { 
            for(i=0;i&lt;ds_list_size(cursorTags);i++)
            {
                draw_text(mx+4,my+10*i,ds_list_find_value(cursorTags,i));
            }
        }
    }
}
//#endregion

//-------------------- Healthbars ---------------------------
//#region
if settingsMenu == false &amp;&amp; keybindMenu_visible == false &amp;&amp; instance_exists(obj_player)
{
    draw_set_font(global.fnt_menu);

    var playerHp = obj_player.hp;
    var playerMaxHp = obj_player.maxHp;
    
    if playerHp &gt; 0
    { draw_sprite_stretched(spr_ui_healthBar,0,viewWidth-110,10,100*(playerHp/playerMaxHp),6); }
    draw_text(viewWidth-95,10,"HP: "+string(playerHp)+"\"+string(playerMaxHp));
    
    //-Red Health vial
    //draw_nineSliceBox(spr_ui_vial,viewWidth-110,9,viewWidth-10,16,0);
    draw_sprite(spr_ui_vial,0,viewWidth-110,9);
    
    //- Pie health bar
    if instance_exists(obj_pie)
    {
        var pieHp = obj_pie.hp;
    
        if pieHp &gt; 0
        { draw_sprite_stretched(spr_ui_pieHealth,0,viewWidth-110,21,pieHp,6) }
        draw_text(viewWidth-95,20,"HP: "+string(pieHp)+"\"+string(obj_pie.maxHp));
        
        //-Blue health vial
        //draw_nineSliceBox(spr_ui_vial,viewWidth-110,19,viewWidth-10,26,0);
        draw_sprite(spr_ui_vial,0,viewWidth-110,19);
    }
    
    //- Boss health bar
    if worldControl.raidBoss == true
    {
        //Boss ID
        var boss = worldControl.raidBossID;
        var bossName = "Null";
        
        //Return the boss's name.
        switch boss.object_index
        {
            //All possible boss objects.
            case obj_bombKing: { bossName = "The Bomb King" } break;
            case obj_sphereKing: {bossName = "The Sphere King"} break;
            case obj_nilmerg: {bossName = "Nilmerg the Gremlin Bee"} break;
            case obj_shadowGremlin: {bossName = "Shadow Gremlin Champion"} break;
            case obj_bliplo: {bossName = "Bliplo the Crustaceous"} break;
            case obj_crabKing: {bossName = "Crab Elite"} break;
        }
        
        if boss != noone
        {
            var bossHp = boss.hp;
            var bossMaxHp = boss.maxHp
            draw_text(18,dispHeight-30,bossName);
            draw_nineSliceBox(spr_ui_healthBar,16,dispHeight-16,(dispWidth-16)*(bossHp/bossMaxHp),dispHeight-8,0);
            draw_nineSliceBox(spr_ui_vial,16,dispHeight-16,dispWidth-16,dispHeight-8,0);
        }
    }
    
    // - Energy
    if instance_exists(worldControl) &amp;&amp; room == rm_zero
    { 
        draw_text(viewWidth-12,30,string(energy));
        draw_sprite(spr_ui_electricity,0,viewWidth-25,30);
    }
}
//#endregion

//-------------------Settings Menu-----------------------------
//#region
if settingsMenu == true
{

    var xx = display_get_gui_width()/2;
    var yy = display_get_gui_height()/2;
    
    draw_set_font(global.fnt_menu);
    draw_text(xx-26,yy-80,"Game Paused");

    //Draw background
    draw_nineSliceBox(spr_ui_9slice,(xx)-50,(yy)-65,(xx)+50,(yy)+65,0);
    
    //PopMessage Setting
    draw_sprite(spr_ui_selectedBool,showPopMessage,xx-40,yy-40);
    draw_text(xx-32,yy-43,"Damage Numbers");
    
    //Debug setting
    draw_sprite(spr_ui_selectedBool,dev,xx-40,yy-30);
    draw_text(xx-32,yy-33,"Debug Mode");
    
    //toggle background/performance mode setting
    draw_sprite(spr_ui_selectedBool,performance_mode,xx-40,yy-20);
    draw_text(xx-32,yy-23,"Performance Mode");
    
    //toggle music setting
    draw_nineSliceBox(spr_ui_slider,xx-30,yy+1,xx+30,yy+4,0);
    draw_sprite(spr_ui_selectedBool,1,(xx-30)+(60*(music_volume/1)),yy+4);
    draw_text(xx-32,yy-13,"Music Volume:"+string(music_volume));
    
    //keybind setting
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy+20);
    draw_text(xx-32,yy+17,"Change Keybinds");
    
    //vsync toggle
    draw_sprite(spr_ui_selectedBool,vsyncToggled,xx-40,yy+30);
    draw_text(xx-32,yy+27,"Toggle Vsync");
    
    //Draw save and exit button
    draw_nineSliceBox(spr_ui_button,xx-20,yy+40,xx+20,yy+63,0);
    draw_text(xx-15,yy+45,"Exit to# Menu");
    
    
}
else if keybindMenu_visible == true
{  

    //Draw the keybinding menu!
    var xx = display_get_gui_width()/2;
    var yy = display_get_gui_height()/2;

    //-Draw background
    draw_nineSliceBox(spr_ui_9slice,(xx)-50,(yy)-65,(xx)+50,(yy)+65,0);
    
    //-Movement keys
    //-- jump
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy-40);
    draw_text(xx-32,yy-43,"Jump: "+scr_get_character(global.key_jump));

    //-- left
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy-30);
    draw_text(xx-32,yy-33,"Move Left: "+scr_get_character(global.key_left));
    
    //-- right
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy-20);
    draw_text(xx-32,yy-23,"Move Right: "+scr_get_character(global.key_right));
    
    //-- down
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy-10);
    draw_text(xx-32,yy-13,"Move Down: "+scr_get_character(global.key_down));
    
    //- Ui keys
    //-- Inventory
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy);
    draw_text(xx-32,yy-3,"Open Inventory: "+scr_get_character(global.key_inven));
    
    //-- Crafting Menu
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy+10);
    draw_text(xx-32,yy+7,"Crafting Menu: "+scr_get_character(global.key_craft));
    
    //-- Interact
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy+20);
    draw_text(xx-32,yy+17,"Interact: "+scr_get_character(global.key_interact));
    
    //-- quick heal
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy+30);
    draw_text(xx-32,yy+27,"Quick Heal: "+scr_get_character(global.key_quick_heal));
    
    //Draw save and exit button
    draw_nineSliceBox(spr_ui_button,xx-20,yy+40,xx+20,yy+50,0);
    draw_text(xx-15,yy+45,"Go Back");
    
}

//------------------Quests/Task List--------------------------
/*if room == rm_tutorial
{
    if showTaskList == true
    {
        var xx = display_get_gui_width();
        var yy = 0;
        
        //Draw text
        var str = scr_getTaskText(currentTask);
        var str_length = string_length(str)*2.25;
        if (str_length &gt; viewWidth/2) then str_length = viewWidth/2;
        draw_text_transformed(x+viewWidth/2-str_length,y+30,str,1.25,1.25,0);
    }
}*/
//#endregion

//-------------------Wave Progress Meter and Other Icons----------------------
//#region

if interm == false
{
    draw_set_font(global.fnt_menu);
    draw_text(10,dispHeight-13,"Wave "+string(wave)+" Progress: "+string(floor(raidProgress/2))+"/"+string(floor(maxRaidProgress/2)));
    draw_sprite_stretched(spr_nullLight,0,0,dispHeight-4,dispWidth,dispHeight-2);
    draw_sprite_stretched(spr_ui_waveProgress,0,0,dispHeight-4,(raidProgress/maxRaidProgress)*dispWidth,2);
}
else if instance_exists(worldControl)
{
    draw_set_font(global.fnt_menu);
    draw_text(10,dispHeight-13,"Next Wave: "+string(wave+1));
    draw_sprite_stretched(spr_nullLight,0,0,dispHeight-4,dispWidth,dispHeight-2);
    draw_sprite_stretched(spr_ui_waveProgress,0,0,dispHeight-4,(world_Time/worldControl.world_TimeMax)*dispWidth,dispHeight-2);
    
    //Region shifting icon

    var region_shift = worldControl.region_shift;
    if region_shift == true { draw_sprite(spr_ui_region_shift,region_shift,147+string_width(string(currency_essence)),10) };
}


//---Essence amount
if !instance_exists(obj_tutorialControl)
{
    draw_sprite(spr_ui_essenceOutline,esc_subimage,125,10);
    draw_sprite_ext(spr_ui_essence,esc_subimage,125,10,1,1,0,essence_color,1);
    
    var cur_str = scr_convertFullNumberToString(drawn_essence);
    draw_text_transformed(132,7,cur_str,0.8,0.8,0);
}

//---Display Enemy Information---
if cursor_information != ""
{
    draw_set_font(global.fnt_menu);
    draw_text(mx-string_width(cursor_information)/2,my+10,cursor_information);
}
//#endregion
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (settingsMenu == false &amp;&amp; keybindMenu_visible == false) &amp;&amp; (room == rm_zero || room == rm_tutorial) &amp;&amp; instance_exists(obj_player)
{    
    //Building indicator
    var xx = round(mouse_x/16)*16;
    var yy = round(mouse_y/16)*16;
    
    var mouse_distance_to_player = point_distance(xx,yy,obj_player.x,obj_player.y);
    
    if selectedSlot != noone &amp;&amp; mouse_distance_to_player &lt; 4*16
    {
        if inventorySlotType[selectedSlot] == 3
        {
            var _tile = scr_invenTileIndex(inventorySlotIcon[selectedSlot]);
            
            draw_set_alpha(0.5);
        
            if (!position_meeting(xx,yy,OBSTA) &amp;&amp; !position_meeting(xx,yy,NOCOL) || position_meeting(xx,yy,obj_woodenStilt) &amp;&amp; !position_meeting(xx,yy,OBSTA)) 
            &amp;&amp; !(object_get_parent(_tile) == PLR_NOCOL &amp;&amp; position_meeting(xx,yy,NOCOL))
            &amp;&amp; point_distance(obj_player.x,obj_player.y,mouse_x,mouse_y) &lt;= 16*4 //3 tiles worth of distance.
            &amp;&amp; (isConnected(xx,yy) || isGrounded(xx,yy)) //|| collision_point(xx,yy+16,obj_platform,false,false) )
            &amp;&amp; !collision_rectangle(xx-8,yy-8,xx+8,yy+8,obj_player,false,true) 
            &amp;&amp; !collision_rectangle(xx-8,yy-8,xx+8,yy+8,ENEMY,false,true)
            &amp;&amp; !position_meeting(xx,yy+2,obj_pie)
            { draw_set_color(c_green) } else draw_set_color(c_red);
            
            draw_set_blend_mode(bm_add);
            draw_rectangle(xx-8,yy-8,xx+8,yy+8,false);
            draw_sprite(object_get_sprite(_tile),0,xx,yy);
            draw_set_blend_mode(bm_normal);
        }
    }
    
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="117">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hudVisible = !hudVisible;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear Ui or Open Settings
if room == rm_menu || keybindMenu_visible == true then exit;

//Settings menu
if settingsMenu == false
{
    if invOpen == false &amp;&amp; showSuperMenu == false
    { settingsMenu = true; }
    
    //Close other menus
    if invOpen == true then invOpen = false;
    if showSuperMenu == true then showSuperMenu = false;
}

//If settings menu is open AND the game has been paused: delete paused objects and unpause the game.
if settingsMenu == true &amp;&amp; instance_exists(obj_pausedObject)
{
    //Destroy the cloned world
    if instance_exists(obj_pausedObject)
    {
        with obj_pausedObject
        {
            instance_destroy();
        }
    }
    
    //Reactivate
    instance_activate_object(PAUSE);
    
    with PAUSE
    {
        //Keep previously inactivate objects inactive.
        if deactivate_method != "PAUSE"
        {
            instance_deactivate_object(id);
        }
    }
    
    print("Paused instances: "+string(instance_number(obj_pausedObject)));
    settingsMenu = false;
    
    worldControl.plr_xBuffer = 0;
}

//If the settings menu var is true but the game isn't paused, pause the game and keep the menu open.
else if settingsMenu == true
{
    //PAUSE THE GAME
    with PAUSE
    {
        //Clone game world
        if visible == true
        {
            var p = instance_create(x,y,obj_pausedObject);
            p.sprite_index = sprite_index;
            p.image_index = image_index;
            p.image_xscale = image_xscale;
            p.image_yscale = image_yscale;
            p.image_angle = image_angle;
            p.depth = depth;
            
            //-Special cases-
            if object_index == obj_chest then p.visible = false;
            else if object_index == obj_tree &amp;&amp; canopy == true
            {
                p.canopy = true;
            }
            
            if object_get_parent(object_index) == TILE || object_index == obj_nullLight
            {
                if light_level &lt; 255// &amp;&amp; y &gt; stoneLayer
                {
                    p.sprite_index = spr_blackTile;
                }
            }
        }
        
        //Note the instance's deactivation method.
        deactivate_method = "PAUSE";
        
        instance_deactivate_object(id);
    }
    
    //Make sure we don't skip this frame.
    draw_enable_drawevent(true);
    
    print("Paused instances: "+string(instance_number(obj_pausedObject)));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
