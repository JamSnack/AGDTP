// 2021-03-14 14:53:44
#event create|Initialize the Gremlin
canActiveRegion = true;

scale = 1;
canHurt = true;
hp = 50+waveScale(25,5,0,-1);
maxHp = hp;
image_speed = 0;
state = MOVE;
stunned = false;

vsp = 0;
atkBox = 32; //divided by 2 on calculation.
b_atkBox = 16*7; //Range for bomb attack.
damage = 5; //Attack damage.
b_damage = 40; //Bomb damage. (DAMAGE DONE TO TILES IS DIVIDED BY 10)
attackCooldown = 3; //How long until the bombKing can launch another attack.

hurtAlarm = 1;
friction = 0.2;

target = obj_pie; //objective priority.

objective = target;
stateLockAlarm = 2;
aggroRange = 0; //0 tiles

//Flying speed
hAccel = 0;
vAccel = 0;
maxAccel = 0.6;
accelRate = 0.05;

//Animation
bobAmt = 0;
bobDir = 1;
bobLinearDir = 1;
bobRate = 0.2;
bobAltitude = 4;

stateLock = true;
alarm[stateLockAlarm] = 20;

image_xscale = sign(target.x-x);

event_inherited();
alarm[3] = -1;
knockType = "FLY";
knock_resistance = waveScale(0.25,5,0.2,0.5);

deathSound = snd_enemydie_boss;

if raid_boss == true
{
    scale += 0.1; 
    maxAccel += 0.2;
    image_yscale = scale;
}

#event destroy
event_inherited();

if dropItem != true then exit;

var r = irandom(99); //0 to 99

scr_spawnEssence(1+waveScale(2,5,1,5),10,1+waveScale(1,10,1,2));
if r <= 25 then scr_dropItem(ITEMID.cons_bomb,choose(1,2,3),4,x,y-4,noone);
else if r >= 85
{
    scr_dropTag("Grenade",1);
    scr_playSound(snd_rareItem,false,11,x,y,1);
} 

if r >= 95 && r <= 15
{
    scr_dropItem(ITEMID.acc_satchel,0,ITEMTYPE.accessory,x,y,noone);
}

scr_dropItem(ITEMID.item_copperOre,irandom_range(3,5+waveScale(1,5,1,10)),ITEMTYPE.def,x,y,noone);

#event alarm1|Reset hurt
canHurt = true;
target = obj_player;
state = MOVE;
hAccel = 0;
vAccel = 0;
bombRing = noone;

#event alarm2|Reset state lock
stateLock = false;

objective = target;
state = MOVE;

#event alarm3|Bomb Ring Attack
var bombRing = collision_circle(x,y,atkBox/2,PLRTILE,false,true);

if bombRing == noone
{
    state = MOVE;
    alarm[3] = -1;
} else if bombRing != noone
{
    var _exp = instance_create(x,y,obj_explosion);
    _exp.type = PLRTILE;
    _exp.radius = b_atkBox;
    _exp.damage = b_damage;
    
    alarm[3] = attackCooldown*room_speed;
}

#event step
if canHurt == false then state = IDLE;
var canSeeTarget = !collision_line(x,y,target.x,target.y,OBSTA,false,false);

//Gremlin Ai
target = obj_pie;
objective = obj_pie;

if instance_exists(objective) 
{ ai_bombKing(state,spr_gremlinIdle,spr_gremlinJump,spr_gremlinWalk,1,objective,-4,atkBox); } 
else target = obj_pie;

#event draw
switch state
{
    case WANDER: { draw_sprite_ext(sprite_index,image_index,x,y+(bobAmt*bobAltitude),image_xscale,image_yscale,image_angle,c_white,image_alpha); } break;
    default: { draw_self(); }
}