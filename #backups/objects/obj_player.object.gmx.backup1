// 2021-02-19 14:51:46
#event create|Initialize the player
state = IDLE;
hsp = 0; //current horizontal speed
vsp = 0; //current vertical speed
tool = 0; //The player holds nothing.
tool_buffer = noone; //The last tool the player held before switching to building mode
knockBack = false;
knockPoint_x = 0;
knockPoint_y = 0;
climbSpeed = 1;
platformCollide = true;

image_speed = 10/60;
mask_index = spr_playerIdle;
armIndex = spr_armIdle;
armFrame = 0;
armAngle = 0;
armAngleGoal = 0;
armAngleRate = 0;
armOffset = 0; //Used for thrusting the arm forward or backward!
armOffsetGoal = 0;
armOffsetRate = 0;
armStabComplete = false;
toolAnimation = "SWING";
knockType = "LAND";
hForce = 0;
vForce = 0;

//Initialize Player Stats
maxHp = 100; //Maximum health
hp = maxHp; //current health
canHurt = true; //The player can take damage.
hurtAlarm = 0; //The alarm to activate when hurt.
hsp_walk = 2; //Max walk speed
vsp_jump = -5; //Max jump speed
break_range = 2; //Tiles around the player that can be broken.
dead = false; //Whether or not the player is dead.
knock_resistance = 0.24;

//Tool variables
toolReady = true;
toolSprite = spr_sword;
toolFireRate = 40;
projSpeed = 3.5;
projDecay = 0.25;
projSprite = spr_projectile1;
weaponDamage = 4;
weaponKnockback = 3;
pickDamage = 1;
pickLevel = 0;
pickRange = 4;
g_over = false;
canUseTool = true;
hitSyncX = 0; //Hitbox Synchronizers
hitSyncY = 0;
playerLight = 0; //How bright light is underground.
tool_snd = noone;

//Tag Resets
globalvar bright_reset;
bright_reset = false; //Boolean to reset the light stat to 16. PROLLY NEEDS TO CHANGE IN THE FUTURE LOL

if room = rm_zero then g_over = gameOver;

friction = 0.3;

//Apply equipped accessories
scr_reloadAccessories();

//AUDIO
audio_listener_orientation(0,0,-1000,0,1,0);

//Tutorial tips
if tip_controls == false
{
    scr_createTip(1.5,1.75,"controls");
}

//SPAWN NOT INSIDE TILES
while place_meeting(x,y,PLRTILE) y-=16;

#event alarm0|Reset canHurt;
canHurt = true;

#event alarm1|Respawn after death
g_over = gameOver;

if g_over == false
{
    visible = true;
    x = obj_pie.x;
    y = obj_pie.y-32;
    while place_meeting(x,y,OBSTA) y-=16;
    hp = maxHp;
    dead = false;
}

#event alarm2|Reset animations that need it
armIndex = spr_armIdle;
toolReady = true; 
armAngle = 0;
armOffset = 0;
armOffsetRate = 0;

#event step|Movement and Death Check
if dead = false && g_over == false
{
    var spr_height = sprite_get_height(spr_playerIdle)/2;
    var spr_width = sprite_get_width(spr_playerIdle)/2;

    if knockBack == false
    {
        key_right = keyboard_check(global.key_right);
        key_left = keyboard_check(global.key_left);
        key_jump = keyboard_check(global.key_jump);
        key_down = keyboard_check(global.key_down);
    }
    
    hsp = (key_right - key_left) * hsp_walk;
    if vsp < maxGrav then vsp = vsp + grav;
    
    //Jump check
    if  key_jump && ((position_meeting(x-4,y+spr_height+1,OBSTA) || position_meeting(x+2,y+spr_height+1,OBSTA)) || (position_meeting(x,y+spr_height+1,obj_platform)))
    {
        vsp = vsp_jump;
    }
    
    //Horizontal Movement
    var hdir = sign(hsp+hForce) //Horizontal Direction
    
    if hdir != 0 then image_xscale = hdir;
    if hsp+hForce != 0 && (place_meeting(x+hsp+hForce,y,OBSTA))
    {
        //move as close as we can
        while (!place_meeting(x+hdir,y,OBSTA))
        { x = x + hdir; }
        hsp = 0;
        hForce = 0;
    }
    
    x = x +hsp+hForce;
    hForce = approach(hForce,0,knock_resistance);
    
    //Vertical Movement
    var hdir = sign(vsp+vForce); //up = -1, down = 1.
    
    //Ladder Logic
    if vsp != 0 && place_meeting(x,y,obj_ladder)
    { vsp = 0; }
    
    
    //--Collision with ground; else platform
    if (vsp+vForce >= 0 && (position_meeting(x-4,y+spr_height+vsp+vForce+1,OBSTA) || position_meeting(x+4,y+spr_height+vsp+vForce+1,OBSTA))) || (vsp+vForce < 0 && (position_meeting(x-4,y-spr_height+vsp+vForce+1,OBSTA) || position_meeting(x+4,y-spr_height+vsp+vForce+1,OBSTA)))
    {
        //move as close as we can
        while (!place_meeting(x,y+hdir,OBSTA))
        { y = y+hdir; }
        vsp = 0;
        vForce = 0;
    }
    //---------PLATFORM COLLISION
    else if !key_down && instance_exists(obj_platform)
    {
        var _plat = instance_place(x,y+vsp+vForce,obj_platform);
                
        if _plat != noone && vsp+vForce > 0 && y+spr_height < _plat.y-7
        {
            while(!place_meeting(x,y+sign(vsp+vForce),_plat))
            {
                y += sign(vsp+vForce);
            }
            
            if position_meeting(x,y+spr_height+vsp+vForce,_plat)
            {
                //Check for cases w/ overlapping hitboxes
                while(place_meeting(x,y,_plat))
                {
                    y -= 1;
                }
            }
            
            vForce = 0;
            vsp = 0;
        }
    }

    y = y+vsp+vForce;
    vForce = approach(vForce,0,knock_resistance);
    
    //Jump sprites
    if vsp != 0 && !place_meeting(x,y+1,OBSTA)
    {
        if sprite_index != spr_playerJump then sprite_index = spr_playerJump;
        if armIndex != spr_armJump && armAngle == 0 then armIndex = spr_armJump;
        if y > yprevious then image_index = 1 else image_index = 0;
        armFrame = image_index;
        platformCollide = false;
    }
    
    ///Knockback
    if knockBack == true
    {
        if hForce+vForce == 0 { knockBack = false; }
    }
    
    
    //------------------Sprites--------------------
    switch state
    {
        case IDLE:
        {
            if sprite_index != spr_playerIdle && vsp == 0 then sprite_index = spr_playerIdle;
            if armIndex != spr_armIdle && armAngle == 0 && vsp == 0 then armIndex = spr_armIdle;
            if image_speed != 10/60 then image_speed = 10/60;
            
            if hsp != 0 then state = MOVE;
        }
        break;
    
        case MOVE:
        {
            if sprite_index != spr_playerWalk && (position_meeting(x,y+1+spr_height,OBSTA) || position_meeting(x,y+1+spr_height,obj_platform) ) then sprite_index = spr_playerWalk;
            if armIndex != spr_armWalk && armAngle == 0 && vsp == 0 then armIndex = spr_armWalk;
            if image_speed != (14+((hsp_walk)/10))/60 then image_speed = (14+((hsp_walk)/10))/60;
            
            if hsp == 0 then state = IDLE;
        }
        break;
    }
    
    if armAngle == 0 { armFrame = image_index; } else armFrame = 0;
    
    //Animate Arm movement
    //- Swing
    if armAngle != 0 && toolAnimation == "SWING" && tool != 4
    {
        //Move the arm back to 0.
        if armAngle > armAngleGoal
        { 
            armAngle = approach(armAngle,armAngleGoal,armAngleRate);
            
            //Do not let armAngle = 0, this will stop the animation.
            if armAngle == 0 then armAngle = 0.1;
            
            if armAngle <= armAngleGoal 
            { 
                armIndex = spr_armIdle;
                toolReady = true; 
                armAngle = 0; 
            }
        }
        
    
    //---Stab--- 
       
    } 
    else if toolAnimation == "STAB" && tool != 4
    {
        if armStabComplete == false
        {
            if armOffset < armOffsetGoal 
            { armOffset += armOffsetRate }
            else
            { armStabComplete = true; }
        } 
        else
        {
            armOffset -= armOffsetRate;

            if armOffset <= 0
            {
                //Reset to default values
                //- arm index doesn't need to reset.
                toolReady = true;
                armStabComplete = false;
                armOffset = 0;
                armOffsetRate = 0;
                armOffsetGoal = 0;
                hitSyncX = 0;
                hitSyncY = 0;
            }
        }
        //- cute little magic used for simulating 360 degrees of arm movement that isn't actually real ;-;
        var _dir = point_direction(x,y,mouse_x,mouse_y);
            
        //- prepare _dir for further processing...
        if image_xscale == -1 then _dir = (_dir-180)*-1;
        
        hitSyncY = y+lengthdir_y((armOffset),_dir);
        hitSyncX = x+lengthdir_x((armOffset)*image_xscale,_dir);
    }
    else if toolAnimation == "SHOOT" && ( tool == 2 || tool == 1) && toolReady == false
    {
        //Aim towards the mouse!
        var _dir = point_direction(x,y,mouse_x,mouse_y);
        image_xscale = sign(mouse_x-x);
        armIndex = spr_armSwing; //Still a straight arm.
        if image_xscale == 1 then armAngle = _dir else armAngle = (_dir-180)*-1;
    }
    
    //Face mouse when using item
    if mouse_check_button(mb_left) && hudControl.cursorHoldItem == false
        { if mouse_x != x then image_xscale = sign(mouse_x-x); }
        
}
    
    
    
//---------check for death-----------
if dead == false
{
    if hp <= 0 || g_over == true
    {
        dead = true;
        alarm[1] = room_speed*5;
        visible = false;
        
        //LOSE ESSENCE
        var essence_lost = ceil(scr_getInvenItemAmt(ITEMID.item_gremEssence)*0.10);
        
        scr_spawnEssence(1,room_speed*5,essence_lost);
        scr_invenRemoveItem(ITEMID.item_gremEssence,essence_lost,0,false,-1,noone);
        scr_hudMessage(string(essence_lost)+" essence lost...",global.fnt_Ui,5,0,c_red,0);
        
        //Respawn at the pie
        x = obj_pie.x;
        y = obj_pie.y;
    }
    
//---AUDIO LISTENENR POSITION----
audio_listener_position(x,y,0);
}

//Remain inside the room at all times
x = clamp(x,0,room_width);
y = clamp(y,0,room_height);

//Arm calculations will sometimes cause image_xscale to be zero.
if image_xscale != 1 && image_xscale >= 0 then image_xscale = 1
else if image_xscale != -1 && image_xscale < 0 then image_xscale = -1;

//HP clamp
hp = clamp(hp,0,maxHp);
#section|Interact
//-------INTERACT KEY------------
if keyboard_check_released(global.key_interact)
{
    ///Interact with objects that aren't crafting
    if instance_exists(INTERACT)
    {
        var interact = instance_nearest(x,y,INTERACT);
        
        if distance_to_point(interact.x,interact.y) < 32 && interact.bench == false
        {
            with interact event_user(0);
        }
    }
}

#event collision:obj_ladder
if !place_meeting(x,y-climbSpeed,OBSTA) && key_jump then y-=climbSpeed
else if !place_meeting(x,y+climbSpeed,OBSTA) && key_down then y+=climbSpeed;

platformCollide = false;

#event keyboard:vk_left
if dev == true then x -= 5;

#event keyboard:vk_up
if dev == true then y -= 10;

#event keyboard:vk_right
if dev == true then x += 5;

#event keyboard:vk_down
if dev == true then y += 5;

//x = obj_pie.x;
//y = obj_pie.y;

#event mouse_global_left_button|Use Tool
//Check for inventory use
if dead == false && hudControl.settingsMenu == false && hudControl.selectedSlot != noone && hudControl.equipQueue == noone && hudControl.showSuperMenu == false
{
    var dx = device_mouse_x_to_gui(0)
    var dy = device_mouse_y_to_gui(0)
    
    //Defines the crafting menu's dimensions.
    var _cmX = view_wview[0]/2-120;
    var _cmY = view_hview[0]/2-105;
    
    if 
        //- Inventory stipulations
        !point_in_rectangle(dx,dy,0,5,125,15) && !point_in_rectangle(dx,dy,0,50,hudControl.invenX,70) 
        && hudControl.cursorHoldItem == false &&
        
        //- Crafting Menu stipulations
        !(hudControl.showSuperMenu == true && point_in_rectangle(dx,dy,_cmX,_cmY,250+_cmX,200+_cmY))
    {
        //- Variable declarations and rules
        var slot = hudControl.selectedSlot;
        if slot == noone then exit;
        
        var item = hudControl.inventorySlotIcon[slot];
        if item == 0 then exit;
        
        //Play the tool's audio.
        if tool_snd != noone && toolReady == true && (tool == 2 || tool == 1)
        {
            audio_play_sound(tool_snd,5,false);
        }
        
        
        //-------USE THE TOOL !----------
        switch tool
        {
            case 1:
            {
                //Weapon slot
                if toolReady == true
                {
                    //Use weapon
                    scr_useWeapon(proj_type,projSpeed,projDecay,projSprite,weaponDamage,weaponKnockback);
                    
                    switch toolAnimation
                    {
                        case "SWING":
                        {
                            armIndex = spr_armSwing;
                            armAngleGoal = -60; //Down somewhat
                            armAngle = 90; //Straight up
                            armAngleRate = (180/toolFireRate)+1;
                            toolReady = false;
                        }
                        break;
                        
                        case "SHOOT":
                        {
                            var _dir = point_direction(x,y,mouse_x,mouse_y);
                            
                            image_xscale = sign(mouse_x-x);
                        
                            armIndex = spr_armSwing; //Still a straight arm.
                            if image_xscale = 1 then armAngle = _dir else armAngle = (_dir-180)*-1;
                            
                            toolReady = false;
                            alarm[2] = toolFireRate;
                        }
                        break;
                        
                        case "STAB":
                        {   
                            //Initialize Animation
                            var _dir = point_direction(x,y,mouse_x,mouse_y);
                            
                            image_xscale = sign(mouse_x-x);
                        
                            armIndex = spr_armSwing; //Still a straight arm.
                            if image_xscale = 1 then armAngle = _dir else armAngle = (_dir-180)*-1;
                            toolReady = false;
                            alarm[2] = toolFireRate;
                            
                            armOffset = 0;
                            armOffsetGoal = 20;
                            armOffsetRate = (armOffsetGoal*2)/toolFireRate;
                            armStabComplete = false;
                        }
                        break;
                    }
                }
            }
            break;
            
            case 2:
            {
                //Pickaxe Slot
                if toolReady == true
                {
                    scr_usePickaxe(pickDamage,pickLevel);
                    
                    switch toolAnimation
                    {
                        case "SWING":
                        {
                            armIndex = spr_armSwing;
                            armAngleGoal = -60; //Down somewhat
                            armAngle = 90; //Straight up
                            armAngleRate = (180/toolFireRate)+1; //180 is a number larger than the goal. This calculation will always result in an angle rate that is fast enough to finish the animation.
                        }
                        break;
                        
                        case "SHOOT":
                        {
                            //Aiming done in the step event.
                            armIndex = spr_armSwing; //Still a straight arm.
                            alarm[2] = toolFireRate;
                        }
                        break;
                    }
                    
                    toolReady = false;
                }
            }
            break;
            
            case 4:
            {
                //Consumable
                if toolReady == true && room == rm_zero
                {
                    scr_useConsumable(hudControl.inventorySlotIcon[slot]);
                }
            }
            break;
            
            case ITEMTYPE.accessory:
            {
                if toolReady == true
                {
                    //Equip/Dequip the accessory
                    scr_applyAccessory(item);
                    
                    toolReady = false;
                    toolAnimation = "SWING";
                    armIndex = spr_armSwing;
                    armAngleGoal = 71;
                    armAngle = 70; //Straight up
                    armAngleRate = 0;
                    toolSprite = spr_nothing;
                    alarm[2] = room_speed/2;
                }
            }
            break;
        }
    }
}


#event draw
//draw body
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,0,c_white,1);

//draw arms
//- Draw tool
if toolReady == false 
{
    switch toolAnimation
    {
        case "SWING":
        {
            draw_sprite_ext(toolSprite,0,x+lengthdir_x(11*image_xscale,armAngle),y-lengthdir_y(-10,armAngle)-2,image_xscale,image_yscale,armAngle*image_xscale,c_white,1);
        } 
        break;
        
        case "SHOOT":
        {
            draw_sprite_ext(toolSprite,0,x+lengthdir_x(11*image_xscale,armAngle),y-lengthdir_y(-10,armAngle)-2,image_xscale,image_yscale,armAngle*image_xscale,c_white,1);
        }
        break;
        
        case "STAB":
        {
            if armOffset == 0 then break;
            //Click to deathpoke the Gremlins.
            //- cute little magic used for simulating 360 degrees of arm movement that isn't actually real ;-;
            var _dir = point_direction(x,y,mouse_x,mouse_y);
            
            //- prepare _dir for further processing...
            if image_xscale == -1 then _dir = (_dir-180)*-1;
            
            var yOffset = lengthdir_y((armOffset),_dir);
            var xOffset = lengthdir_x((armOffset)*image_xscale,_dir);
            
            draw_sprite_ext(toolSprite,0,x+xOffset,y+yOffset,image_xscale,image_yscale,_dir*image_xscale,c_white,1);
            //- STAB arm animator
            draw_sprite_ext(armIndex,armFrame,x,y,image_xscale,image_yscale,_dir*image_xscale,c_white,1);
        }
        break;
    }
}

//- Default arm animator
if armOffset == 0
{ draw_sprite_ext(armIndex,armFrame,x,y,image_xscale,image_yscale,armAngle*image_xscale,c_white,1); }


#event keyrelease:vk_numpad1
instance_create(mouse_x,mouse_y,obj_grassGremlin);

#event keyrelease:vk_numpad3
scr_dropItem(ITEMID.item_stonePiece,99,0,x,y,noone);
scr_dropItem(ITEMID.item_dirtClump,99,0,x,y,noone);
scr_dropItem(ITEMID.item_gremEssence,99,0,x,y,noone);

#event keyrelease:vk_numpad4
instance_create(x,y,region_shifter);