// 2021-01-25 14:47:05
#event create
globalvar maxInvenSlots,hudVisible;
hudVisible = true;

image_speed = 30/60;

//Inventory
/*NOTE: If the hitboxes for the inventory need to be updated in the future,
    define them here and update them in here, because each event having a local
    set of inventory coordinates is very annoying to update :P.
*/

invOpen = false;
invenXMax = 125;
invenX = 0;
maxInvenSlots = 28;
cursorHoldItem = false;
cursorItem = noone;
cursorAmt = noone;
cursorSlot = noone;
cursorTags = noone;
selectedSlot = noone;
drawCursorItem = false;
d_click = false;
equippedSlot_weapon = 0;
equippedSlot_pickaxe = 1;
pickupTimer = 0; //When right clicking a slot - how long until multiple items will be taken.
pickupTimerMax = 30; //The interval when a single item will be taken out of a slot.
pickupTimerRate = 10;
craftTimer = 0;
craftTimerMax = 30;
craftTimerRate = 10;
equipQueue = noone;


//Super Menu
showSuperMenu = false;
ui_state = "CRAFT"; // No ui is visible

//Crafting Menu
craftIndex = -1; //The CRAFTING ID of the item to craft
craftSelect = -1; //Which crafting slot has its information displayed.
craftBuffer = 0; //Last Item crafted
drawn_crafting_slots = 0; //Used to synchronize slots when drawing the crafting menu.

//Mod Menu
selectedTag = noone;
selectedEquipment = noone;
selectedType = noone;
equipmentIcon = noone;
equipmentTags = noone;
modCanConfirm = false;

//Inventory Slots
maxInvenSlots_original = maxInvenSlots;

//- initialize array length to avoid memory error.
inventorySlotIcon[maxInvenSlots-1] = 0;
inventorySlotAmt[maxInvenSlots-1] = 0;
inventorySlotType[maxInvenSlots-1] = 0;
inventorySlotTags[maxInvenSlots-1] = noone; //Each slot has '2' tag slots.

trashSlotIcon = 0;
trashSlotAmt = 0;
trashSlotType = 0;
trashSlotTags = noone; //Each slot has '2' tag slots.


for (i=0;i<maxInvenSlots;i++)
{
    inventorySlotIcon[i] = 0; //Nothing
    inventorySlotAmt[i] = 0; //No items
    inventorySlotType[i] = 0; //Default item. '1' for equippable tool.
    inventorySlotTags[i] = noone; //No tags
}

//Settings menu
settingsMenu = false; //Whether settings menu is visible or not.
showPopMessage = true; //Whether or not to use popMessages.
showTaskList = true; //Show the player's tasks.
showBackground = true;
musicToggled = true; // Music is on!
keybindMenu_visible = false; //SHOW YA KEYBINDS BIFF
input_wait = false; //Whether or not to wait for an input.

//Place Tiles
lastPlaceX = noone;
lastPlaceY = noone;

//Betwixt menus
upgradeMenu_visible = false;
shopMenu_visible = false;



#event alarm1|Reset crafting slots
currentCraftingSlots = 0;
craftingSpriteSet = 0;

#event step
if room == rm_menu then exit;

if invOpen == true
    { if invenX < invenXMax then invenX += (invenXMax-invenX)*0.2; } 
else { if invenX >= -10 then invenX += (0-invenX)*0.2; }
    
//Fire equipment queue
if obj_player.toolReady == true && equipQueue != noone
{
    scr_slotEquip(equipQueue);
    equipQueue = noone;
}

//Crafting tooltip
if ui_state == "CRAFT"
{
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    var dx = device_mouse_x_to_gui(0);
    var dy = device_mouse_y_to_gui(0);
    
    if point_in_rectangle(dx,dy,_posX,_posY,250+_posX,200+_posY)
    {   
        var drawn_slots = 0;
        
        for(i=0;i<sprite_get_number(spr_itemDrops);i++)
        {
            if scr_checkCraftingIndex(i) == true
            {
                var size = 35; //The size of the distance between slots - the actual size of the slots.
                var column = 7;
                var c = floor(drawn_slots/column);
                
                var x1 = _posX+10+(drawn_slots*size)-(c*size*column);
                var x2 = _posX+30+(drawn_slots*size)-(c*size*column);
                var y1 = _posY+5+(size*c);
                var y2 = _posY+25+(size*c);
                
                //Get Crafting ID of slot
                //WIP: DRAW USING A TOOLTIP OBJECT INSTEAD :)
                if point_in_rectangle(dx,dy,x1,y1,x2,y2)
                { craftSelect = i; }
                
                drawn_slots += 1;
            }
            
            //reset draw_crafting_slots
            if i == sprite_get_number(spr_itemDrops)-1 then drawn_slots = 0;
        }
    }
}

//Update inventory size if needed
var array_size = array_length_1d(inventorySlotIcon);

if maxInvenSlots > array_size
{
    //- reinitialize the array
    inventorySlotIcon[maxInvenSlots-1] = 0;
    inventorySlotAmt[maxInvenSlots-1] = 0;
    inventorySlotType[maxInvenSlots-1] = 0;
    inventorySlotTags[maxInvenSlots-1] = noone; //Each slot has '2' tag slots.
    
    for (i=array_size;i<maxInvenSlots;i++)
    {
        inventorySlotIcon[i] = 0; //Nothing
        inventorySlotAmt[i] = 0; //No items
        inventorySlotType[i] = 0; //Default item. '1' for equippable tool.
        inventorySlotTags[i] = noone; //No tags
    }
}
else if maxInvenSlots < array_size
{
    //If we lose slots, reallocate the affected items
    for(z=array_size-(array_size-maxInvenSlots);z<array_size;z++)
    {
        if hudControl.inventorySlotIcon[z] != ITEMID.nil
        {
            //Remove the item and re-add it to the inventory.
            var _item = hudControl.inventorySlotIcon[z];
            var _amt = hudControl.inventorySlotAmt[z]; 
            var _type = hudControl.inventorySlotType[z]; 
            var _tags = hudControl.inventorySlotTags[z];

            //Unequip a removed accessory
            if _type == ITEMTYPE.accessory
            {
                for(g=0;g<ds_list_size(accessories_equipped);g++)
                {
                    if _item == accessories_equipped[| g]
                    {
                        scr_applyAccessory(_item);
                    }
                }
            }
            
            //Clear the slot
            scr_clearSlot(z);
            
            //Reallocate the item
            if scr_invenAddItem(_item,_amt,_type,_tags) == -1
            {
                scr_dropItem(_item,_amt,_type,obj_player.x,obj_player.y,_tags);
            }
        }
    }
}

//--------------KEYBINDING-----------------
if input_wait == true && keyboard_key != 0
{
    if global.key_jump == noone
    { global.key_jump = keyboard_key; }
    else if global.key_left == noone
    { global.key_left = keyboard_key; }
    else if global.key_right == noone
    { global.key_right = keyboard_key; }
    else if global.key_down == noone
    { global.key_down = keyboard_key; }
    else if global.key_inven == noone
    { global.key_inven = keyboard_key; }
    else if global.key_craft == noone
    { global.key_craft = keyboard_key; }
    else if global.key_interact == noone
    { global.key_interact = keyboard_key; }
    
    input_wait = false;
}


//-----------KEY INTERATION----------------

if keyboard_check_released(global.key_inven)
{
    //- Toggle Inventory Visibility.
    invOpen = !invOpen;
}

if keyboard_check_released(global.key_craft)
{
    ///Toggle crafting menu
    showSuperMenu = !showSuperMenu;
    
    if instance_exists(gameControl)
    { if currentTask == 1 then currentTask = 2; }
    
        
    //init mod bench
    event_user(0);
}


#event mouse_global_left_button|Crafting interaction
if room == rm_menu then exit;

if obj_player.dead == false
{
    if ui_state == "CRAFT"
    {
        var _posX = viewWidth/2-120;
        var _posY = viewHeight/2-105;
        var dx = device_mouse_x_to_gui(0);
        var dy = device_mouse_y_to_gui(0);
        var drawn_slots = 0;
        
            //This function represents the crafting menu as a whole.
        if point_in_rectangle(dx,dy,_posX,_posY,250+_posX,200+_posY)
        {   
            for(i=0;i<sprite_get_number(spr_itemDrops);i++)
            {
                if scr_checkCraftingIndex(i) == true
                {
                    var size = 35; //The size of the distance between slots - the actual size of the slots.
                    var column = 7;
                    var c = floor(drawn_slots/column);
                    
                    var x1 = _posX+10+(drawn_slots*size)-(c*size*column);
                    var x2 = _posX+30+(drawn_slots*size)-(c*size*column);
                    var y1 = _posY+5+(size*c);
                    var y2 = _posY+25+(size*c);
                    
                    //Get Crafting ID of slot
                    if point_in_rectangle(dx,dy,x1,y1,x2,y2)
                    { 
                        craftIndex = i; //Current itemID. 
                        craftSelect = i; //Current information
                        
                        if craftTimer == 0 
                        { scr_craftItem(i); }
                        
                        break; 
                    } else { craftIndex = -1; craftSelect = -1; }
                    
                    drawn_slots += 1;
            
                    //reset draw_crafting_slots
                    if i == sprite_get_number(spr_itemDrops)-1 then drawn_slots = 0;
                }
            }
            
            craftTimer += 1;
            
            if craftTimer >= craftTimerMax && scr_checkCraftingIndex(craftIndex) == true
            {
                craftTimer = 1;
                
                if craftTimerMax > 5 then craftTimerMax -= craftTimerRate;
                if craftIndex != -1// && craftTimer > craftTimerMax 
                { 
                    scr_craftItem(craftIndex); 
                    craftSelect = craftIndex;
                    craftBuffer = craftIndex;
                } 
            }
            
        } else if ui_state != "MOD" { craftIndex = -1; }
    } else { craftIndex = -1; }
}
#section|Slot interaction
var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

var hotbarOffset = -45;

//Hotbar and inventory interaction

if invOpen == true
{
    if point_in_rectangle(dx,dy,0,50+hotbarOffset,invenX,200)
    {
        if cursorHoldItem = false && mouse_check_button_pressed(mb_left) && obj_player.toolReady == true
        {
            //---- TRASH SLOT-----
            var x1 = 106/(invenXMax/invenX);
            var y1 = 4+(16*ceil(maxInvenSlots/7));

            if point_in_rectangle(dx,dy,x1,y1,x1+10,y1+10)
            {
                cursorHoldItem = true;
                cursorItem = trashSlotIcon;
                cursorType = trashSlotType;
                cursorAmt = trashSlotAmt;
                cursorTags = trashSlotTags;
                cursorSlot = "trashSlot";
            }
            
            //--- INVENTORY SLOTS ---
            for (i=0;i<maxInvenSlots;i++)
            {
                //inventory slots
                var column = 7;
                var c = floor(i/column);
                
                var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
                var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
                var y1 = -45+(16*c);
                var y2 = -35+(16*c);
                
                //Hotbar slots
                var x3 = (10+(i*16));
                var x4 = (20+(i*16));
                var y3 = -45;
                var y4 = -35;
                
                //Interaction
                if point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) && cursorHoldItem == false || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4) && cursorHoldItem == false
                {
                    cursorHoldItem = true;
                    cursorItem = inventorySlotIcon[i];
                    cursorAmt = inventorySlotAmt[i];
                    cursorType = inventorySlotType[i];
                    cursorSlot = i;
                    cursorTags = inventorySlotTags[i];
                    break;
                }
            }
        }
        
        //Draw slot and cursor embelishments
        if cursorSlot != noone
        {
            selectedSlot = cursorSlot;
            drawCursorItem = true;
        }
    }
}
#section|Place blocks
if room == rm_lobby then exit;

var xx = round(mouse_x/16)*16;
var yy = round(mouse_y/16)*16;

if (lastPlaceX != xx || lastPlaceY != yy) && selectedSlot != noone
{
    for(i=0;i<maxInvenSlots;i++)
    {
        //inventory slots
        var column = 7;
        var c = floor(i/column);
        
        var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
        var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
        var y1 = 5+(16*c);
        var y2 = 15+(16*c);
        
        //Hotbar slots
        var x3 = (10+(i*16));
        var x4 = (20+(i*16));
        var y3 = -15;
        var y4 = -5;
    
        //------------------Place Blocks-------------------------------------
        if i == selectedSlot
        {
            //The whole hotbar section.
            var _x1 = 10;
            var _x2 = 10+(7*16);
        
            if showCraftingMenu == false && !point_in_rectangle(dx,dy,_x1,50+y3,_x2,50+y4) && cursorHoldItem == false
            {
                if inventorySlotType[selectedSlot] == 3 && obj_player.tool == 3
                {
                    var _tile = scr_invenTileIndex(inventorySlotIcon[selectedSlot]);
                    var _amt = inventorySlotAmt[selectedSlot];
                    
                    //Single place
                    if !position_meeting(xx,yy,OBSTA) && !(object_get_parent(_tile) == PLR_NOCOL && position_meeting(xx,yy,NOCOL))
                    && point_distance(obj_player.x,obj_player.y,mouse_x,mouse_y) <= 16*3 //3 tiles worth of distance.
                    && (isConnected(xx,yy) || isGrounded(xx,yy)) //|| collision_point(xx,yy+16,obj_platform,false,false) )
                    && !collision_rectangle(xx-8,yy-8,xx+8,yy+8,obj_player,false,true) 
                    && !collision_rectangle(xx-8,yy-8,xx+8,yy+8,ENEMY,false,true)
                    && !position_meeting(xx,yy+2,obj_pie)
                    {
                        if _amt > 0
                        {
                            instance_create(xx,yy,_tile);
                            scr_tileUpdate(xx,yy);
                            scr_invenRemoveItem(0,1,3,false,selectedSlot,noone);
                            if _amt == 0 then selectedSlot = noone;
                            lastPlaceX = xx;
                            lastPlaceY = yy;
                            break;
                        }
                    }
                }
            }
        }
    }
}

#event mouse_global_right_button|Slot interaction - single item
var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

var hotbarOffset = -45;

//Hotbar and inventory interaction

if invOpen == true
{
    if point_in_rectangle(dx,dy,0,50+hotbarOffset,invenX,200)
    {
        if cursorHoldItem = false
        {
            for (i=0;i<28;i++)
            {
                //inventory slots
                var column = 7;
                var c = floor(i/column);
                
                var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
                var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
                var y1 = -45+(16*c);
                var y2 = -35+(16*c);
                
                //Hotbar slots
                var x3 = (10+(i*16));
                var x4 = (20+(i*16));
                var y3 = -45;
                var y4 = -35;
                
                //Interaction
                if point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) && cursorHoldItem == false && inventorySlotAmt[i] > 0
                || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4) && cursorHoldItem == false && inventorySlotAmt[i] > 0
                {
                    cursorHoldItem = true;
                    cursorItem = inventorySlotIcon[i];
                    cursorAmt = 1;
                    cursorType = inventorySlotType[i];
                    cursorSlot = i;
                    cursorTags = inventorySlotTags[i];
                    
                    break;
                }
            }
        } 
        else
        {
            pickupTimer += 1;
            if pickupTimer >= pickupTimerMax
            {
                if cursorAmt < inventorySlotAmt[cursorSlot]
                { cursorAmt += 1; }
                pickupTimer = 0;
                pickupTimerRate += 2;
                if pickupTimerMax > 0 then pickupTimerMax -= pickupTimerRate;
            }
        }
        
        //Draw slot and cursor embelishments
        if cursorSlot != noone
        {
            selectedSlot = cursorSlot;
            drawCursorItem = true;
        }
    }
}

#event mouse_global_left_release|Ui Interactions
if room == rm_menu then exit;

var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

//---------- MOD BENCH FUNCTIONALITY ---------------

if cursorHoldItem == true && craftingMenu == "menu_mod"
{
    //The dimensions of the menu's slots, as defined in the draw event.
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    var size = 16;
    var xOff = 70;
    var yOff = 100;
    var x1 = (_posX)-size+xOff;
    var y1 = (_posY)-size+yOff;
    var x2 = (_posX)+size+xOff;
    var y2 = (_posY)+size+yOff;
    
    //-- Tag Slot
    if (cursorItem == ITEMID.item_modTag) && point_in_rectangle(dx,dy,x1,y1,x2,y2)
    {
        selectedTag = cursorTags;
    }
    
    //-- Equipment Slot
    if cursorType != ITEMTYPE.def && (cursorType == ITEMTYPE.weapon || cursorType == ITEMTYPE.pickaxe) && point_in_rectangle(dx,dy,x1+50,y1,x2+50,y2)
    {
        selectedEquipment = cursorItem;
        selectedType = cursorType;
        equipmentIcon = cursorItem;
        equipmentTags = cursorTags;
    }
    
    //-- Activate confirmation
    if selectedEquipment != noone && selectedTag != noone
    {
        modCanConfirm = true;
    }
}
else if showCraftingMenu == true && craftingMenu == "menu_mod"
{
    //-- Create new item
    //The dimensions of the menu's slots, as defined in the draw event.
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    var size = 16;
    var xOff = 70;
    var yOff = 100;
    var x1 = (_posX)-size+xOff;
    var y1 = (_posY)-size+yOff;
    var x2 = (_posX)+size+xOff;
    var y2 = (_posY)+size+yOff;
    
    if modCanConfirm == true && point_in_rectangle(dx,dy,x1+110,y1,x2+110,y2)
    {
        //Create a ds_list to store the new tag inside.
        if !ds_exists(equipmentTags,ds_type_list)
        { equipmentTags = ds_list_create(); }
        
        //If tags are less than max tags, add one!
        var tags_maxxed = false;
        
        if ds_list_size(equipmentTags) < 2
        {   
            //Remove the old weapon, then append the tag to the recycled ds list.
            scr_invenRemoveItem(selectedEquipment,-1,selectedType,false,-1,equipmentTags);
            ds_list_add(equipmentTags,selectedTag[| 0]); 
        
            //Remove the ingredient tag.
            scr_invenRemoveItem(ITEMID.item_modTag,1,ITEMTYPE.def,false,-1,selectedTag);
        }
        else 
        {
            scr_hudMessage("Only 2 tags allowed per item.",global.fnt_Ui,5,0,c_red,0);
            tags_maxxed = true;
        }
        
        
        //Reset if successful
        if tags_maxxed == false && scr_invenAddItem(selectedEquipment,0,selectedType,equipmentTags) != -1
        {
            scr_hudMessage("Modification success!",global.fnt_Ui,5,equipmentIcon,c_aqua,0);
            
            event_user(0); //Reset the mod bench.
            
            scr_playSound(snd_modificationSuccess,false,10,obj_player.x,obj_player.y,1);
        } 
        else 
        {
            scr_hudMessage("Modification failed.",global.fnt_Ui,5,0,c_red,0);
            event_user(0); //Reset the mod bench.
        }
    }
}
//--------- TRASH SLOT --------------------------
if cursorHoldItem == true
{
    var x1 = 106/(invenXMax/invenX);
    var y1 = 4+(16*ceil(maxInvenSlots/7));

    if cursorSlot != "trashSlot" && (cursorItem != ITEMID.nil && cursorItem != trashSlotIcon || ( cursorItem == trashSlotIcon && cursorAmt == trashSlotAmt)) && point_in_rectangle(dx,dy,x1,y1,x1+10,y1+10)
    {
        trashSlotIcon = cursorItem;
        trashSlotType = cursorType;
        trashSlotAmt = cursorAmt;
        trashSlotTags = cursorTags;
        
        //variable reset
        scr_clearSlot(cursorSlot);
        
        //check for accessory
        if cursorType == ITEMTYPE.accessory
        {
            var _size = ds_list_size(accessories_equipped)
            
            for(n=0;n<_size;n++)
            {
                //dequip the accessory
                if cursorItem == accessories_equipped[| n]
                {
                    scr_applyAccessory(cursorItem);
                }
            }
        }
        
        cursorHoldItem = false;
        cursorItem = noone;
        cursorAmt = noone;
        cursorSlot = noone;
        cursorType = noone;
        cursorTags = noone;
        selectedSlot = noone;
    }
}

//--------- UPGRADE MENU INTERACTIONS ------------
if upgradeMenu_visible == true && room == rm_lobby
{
        var _posX = viewWidth/2-120;
        var _posY = viewHeight/2-105;
        
        //- INIT BUTTONS
        //NOTE: COORDINATES AND VARIABLES SHOULD BE 1:1 WITH WHAT IS IN THE DRAW GUI EVENT :)
        var h_size = 36;
        var v_size = 12;
        var xx = 8+h_size;
        var yy = 8+v_size;
        
        //- Tile Regen Rate
        if point_in_rectangle(dx,dy,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy)
        {
            scr_buyUpgrade("TILE_REGEN");
        }
        
        //- Tile Level
        var xx = 8+h_size;
        var yy = 40+v_size;
        
        if point_in_rectangle(dx,dy,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy)
        {
            scr_buyUpgrade("TILE_LEVEL");
        }
        
        //- Electricity storage
        var xx = 8+h_size;
        var yy = 72+v_size;
        
        if point_in_rectangle(dx,dy,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy)
        {
            scr_buyUpgrade("POWER_STORAGE");
        }
       
}


//--------- INVENTORY INTERACTIONS -------------
for (i=0;i<maxInvenSlots;i++)
{
    //inventory slots
    var column = 7;
    var c = floor(i/column);
    
    var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
    var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
    var y1 = -45+(16*c);
    var y2 = -35+(16*c);
    
    //Hotbar slots
    var x3 = (10+(i*16));
    var x4 = (20+(i*16));
    var y3 = -45;
    var y4 = -35;

    if cursorHoldItem == true
    {
        
        
        //---------- SET AN ITEM IN A SLOT -----------------------------
        
        if (point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4))
        {
        
        //-----------------------------Copy current item and place in old slot if need be.----------------------------
            if i != cursorSlot
            {
                //Trash slot interaction
                if cursorSlot == "trashSlot"
                {
                    var _invItem = 0; var _invAmt= 0; var _invType = 0; var _invTags = 0;
                    
                    if inventorySlotIcon[i] != ITEMID.nil
                    {
                        _invItem = inventorySlotIcon[i];
                        _invAmt = inventorySlotAmt[i];
                        _invType = inventorySlotType[i];
                        _invTags = inventorySlotTags[i];
                    }
                    
                    //Place item in new slot
                    cursorHoldItem = false;
                    inventorySlotIcon[i] = cursorItem;
                    inventorySlotAmt[i] = cursorAmt;
                    inventorySlotTags[i] = cursorTags;
                    inventorySlotType[i] = cursorType;
                    
                    //Reallocate a replaced item slot.
                    if _invItem != undefined
                    {
                        scr_invenAddItem(_invItem,_invAmt,_invType,_invTags);
                    }
                    
                    selectedSlot = noone;
                    pickupTimer = 0;
                    pickupTimerMax = 60;
                    
                    scr_clearSlot("trashSlot");
                    
                    //Reset variables before script exit
                    cursorHoldItem = false;
                    cursorItem = noone;
                    cursorAmt = noone;
                    cursorSlot = noone;
                    cursorType = noone;
                    cursorTags = noone;
                    selectedSlot = noone;
                    
                    exit;
                }
            
            //- Replace slots with cursor item.
                //-- Case: The new slot is the same item & can be stacked.
                if inventorySlotIcon[i] == cursorItem && inventorySlotAmt[i] > 0 && inventorySlotTags[i] == cursorTags //0 AMT means an item cannot be stacked, otherwise it would be 1.
                {  
                    //-Update the slot previously picked up.
                        //-- Case: the old slot will have no AMT left.
                    if inventorySlotAmt[cursorSlot]-cursorAmt == 0
                    { 
                        scr_clearSlot(cursorSlot);
                    } 
                    else //Case: the old slot will have left-over items.
                    { inventorySlotAmt[cursorSlot] = inventorySlotAmt[cursorSlot]-cursorAmt; }
                   
                    //Update amount in cursor 
                    cursorAmt += inventorySlotAmt[i];
                    
                } 
                else if inventorySlotIcon[i] != 0
                {
                    //Remove items to prevent deletion
                    if cursorAmt != inventorySlotAmt[cursorSlot]
                    {
                        scr_invenRemoveItem(inventorySlotIcon[cursorSlot],
                                            inventorySlotAmt[cursorSlot]-cursorAmt,
                                            inventorySlotType[cursorSlot],
                                            true,cursorSlot,inventorySlotTags[cursorSlot]);
                    }
                
                    //Copy current slot and update the cursorSlot.
                    inventorySlotIcon[cursorSlot] = inventorySlotIcon[i];
                    inventorySlotAmt[cursorSlot] = inventorySlotAmt[i];
                    inventorySlotType[cursorSlot] = inventorySlotType[i];
                    inventorySlotTags[cursorSlot] = inventorySlotTags[i];
                }
                else
                {
                    if inventorySlotAmt[cursorSlot]-cursorAmt == 0
                    {
                        inventorySlotIcon[cursorSlot] = 0;
                        inventorySlotType[cursorSlot] = 0;
                        inventorySlotAmt[cursorSlot] = 0;
                        inventorySlotTags[cursorSlot] = noone;
                    } 
                    else
                    { inventorySlotAmt[cursorSlot] = inventorySlotAmt[cursorSlot]-cursorAmt; }
                }
    
                
                //Place item in new slot
                cursorHoldItem = false;
                inventorySlotIcon[i] = cursorItem;
                inventorySlotType[i] = cursorType;
                inventorySlotAmt[i] = cursorAmt;
                inventorySlotTags[i] = cursorTags;
                
                selectedSlot = noone;
                pickupTimer = 0;
                pickupTimerMax = 60;
                pickupTimerRate = 4;
                
                //Reset variables
                cursorHoldItem = false;
                cursorItem = noone;
                cursorAmt = noone;
                cursorSlot = noone;
                cursorType = noone;
                cursorTags = noone;
                
                exit;
            }
        } else if i == cursorSlot && (showCraftingMenu == false && craftingMenu != "menu_mod") && !point_in_rectangle(dx,dy,0,50-45,invenX,200) { scr_invenRemoveItem(cursorItem,cursorAmt,cursorType,true,cursorSlot,cursorTags); selectedSlot = noone; break; }
    }
    
    
    
    //----------------Click to select a slot-------------------
    if (point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4))
     && obj_player.toolReady == true
    {
        scr_slotEquip(i);
        break;
    }
}

//Ensure variable reset
cursorHoldItem = false;
cursorItem = noone;
cursorAmt = noone;
cursorSlot = noone;
cursorType = noone;
cursorTags = noone;


///Crafting timer reset
craftTimer = 0;
craftTimerMax = 40;
#section|Settings interactions
var xx = display_get_gui_width()/2;
var yy = display_get_gui_height()/2;
var mx = device_mouse_x_to_gui(0);
var my = device_mouse_y_to_gui(0);
var hbox = 4;

if settingsMenu = true
{   
    //Show Pop Messages
    
    //- settings
    //-- In this case, xx-40 and yy-40 are constants denoting the center of the selectionBool sprite.
    if point_in_rectangle(mx,my,xx-40-hbox,yy-40-hbox,xx-40+hbox,yy-40+hbox)
    { showPopMessage = !showPopMessage; }
    
    //- Debug mode
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-30-hbox,xx-40+hbox,yy-30+hbox)
    { dev = !dev; show_debug_overlay(dev); }
    
    //- toggle background
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-20-hbox,xx-40+hbox,yy-20+hbox)
    { 
        showBackground = !showBackground;
        background_visible[2] = showBackground;
        background_visible[3] = showBackground;
        background_visible[4] = showBackground;
        background_visible[5] = showBackground;
    }
    
    //- Toggle music
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-10-hbox,xx-40+hbox,yy-10+hbox)
    {
        musicToggled = !musicToggled;
        audio_sound_gain(music,musicToggled,0);
    }
    
    //Keybinds
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-hbox,xx-40+hbox,yy+hbox)
    {
        keybindMenu_visible = true;
        settingsMenu = false;
    }
    
    //- Exit button
    else if point_in_rectangle(mx,my,xx-20,yy+40,xx+20,yy+50)
    {
        if room == rm_lobby then scr_roomTransition("WARP","Come back soon!",global.fnt_menu,c_white,rm_menu);
        else if interm == true
        {
            //Warp out of the FLATLANDS
            if instance_exists(ENEMY)
            {
                for(_z=0;_z<instance_number(ENEMY)-1;_z++)
                {
                    var _grem = instance_find(ENEMY,_z);
                    
                    if _grem.y < stoneLayer-32 && _grem.x > RAIDBOUND_Lower && _grem.x < RAIDBOUND_Upper
                    {
                        scr_hudMessage("The Flatlands must be clear of Gremlins before warping.",global.fnt_Ui,4,0,c_yellow,0);
                        break;
                    } else scr_roomTransition("WARP","Warping to: The Flatlands",global.fnt_menu,c_white,rm_lobby);
                }
            } else scr_roomTransition("WARP","Warping to: The Flatlands",global.fnt_menu,c_white,rm_lobby);
        }
        
        //Save the game
        with gameControl event_user(0);
    }
}
else if keybindMenu_visible == true
{
    //-Movement keys
    //-- Jump
    if point_in_rectangle(mx,my,xx-40-hbox,yy-40-hbox,xx-40+hbox,yy-40+hbox)
    {
        global.key_jump = noone;
        input_wait = true;
    }
    
    //- left
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-30-hbox,xx-40+hbox,yy-30+hbox)
    {
        global.key_left = noone;
        input_wait = true;
    }
    
    //- right
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-20-hbox,xx-40+hbox,yy-20+hbox)
    {
        global.key_right = noone;
        input_wait = true;
    }
    
    //- down
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-10-hbox,xx-40+hbox,yy-10+hbox)
    {
        global.key_down = noone;
        input_wait = true;
    }
    
    //- inventory
    else if point_in_rectangle(mx,my,xx-40-hbox,yy-hbox,xx-40+hbox,yy+hbox)
    {
        global.key_inven = noone;
        input_wait = true;
    }
    
    //- crafting
    else if point_in_rectangle(mx,my,xx-40-hbox,yy+10-hbox,xx-40+hbox,yy+10+hbox)
    {
        global.key_craft = noone;
        input_wait = true;
    }
    
    //- interact
    else if point_in_rectangle(mx,my,xx-40-hbox,yy+20-hbox,xx-40+hbox,yy+20+hbox)
    {
        global.key_interact = noone;
        input_wait = true;
    }
    
    //- Back button
    else if point_in_rectangle(mx,my,xx-20,yy+40,xx+20,yy+50)
    {
        keybindMenu_visible = false;
        settingsMenu = true;
    }
}

#event mouse_global_right_release
pickupTimerMax = 30;
pickupTimer = 28;
pickupTimerRate = 2;

var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

//Hotbar+inventory coordinates
if !point_in_rectangle(dx,dy,0,50-45,invenX,200) && showCraftingMenu == false
{
    if cursorHoldItem == true
    { scr_invenRemoveItem(cursorItem,cursorAmt,cursorType,true,cursorSlot,cursorTags); }
    
    cursorHoldItem = false;
    cursorItem = noone;
    cursorAmt = noone;
    cursorSlot = noone;
    cursorType = noone;
    cursorTags = noone;
}
else 
{ 
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    var size = 16;
    var xOff = 70;
    var yOff = 100;
    var x1 = (_posX)-size+xOff;
    var y1 = (_posY)-size+yOff;
    var x2 = (_posX)+size+xOff;
    var y2 = (_posY)+size+yOff;
    
    if (showCraftingMenu == true && craftingMenu == "menu_mod")
    {
        //Clear mod slots
        //- Tag Slot
        if point_in_rectangle(dx,dy,x1,y1,x2,y2)
        {
            selectedTag = noone;
            modCanConfirm = false;
        }
        else if point_in_rectangle(dx,dy,x1+50,y1,x2+50,y2)
        {
            //-Equipment Slot
            selectedEquipment = noone;
            selectedType = noone;
            equipmentTags = noone;
            equipmentIcon = 0;
            modCanConfirm = false;
        }
    }
}

#event other_user0|Initialize Mod Bench

selectedEquipment = noone;
selectedType = noone;
equipmentIcon = 0;
equipmentTags = noone;
selectedTag = noone;
modCanConfirm = false;


#event draw
if room == rm_zero || room == rm_tutorial
{    
    //Building indicator
    var xx = round(mouse_x/16)*16;
    var yy = round(mouse_y/16)*16;
    
    var mouse_distance_to_player = point_distance(xx,yy,obj_player.x,obj_player.y);
    
    if selectedSlot != noone && mouse_distance_to_player < 3*16
    {
        if inventorySlotType[selectedSlot] == 3
        {
            var _tile = scr_invenTileIndex(inventorySlotIcon[selectedSlot]);
            
            draw_set_alpha(0.5);
        
            if !position_meeting(xx,yy,OBSTA) && !(object_get_parent(_tile) == PLR_NOCOL && position_meeting(xx,yy,NOCOL)) &&
            !collision_rectangle(xx-8,yy-8,xx+8,yy+8,obj_player,false,true) && 
            !collision_rectangle(xx-8,yy-8,xx+8,yy+8,ENEMY,false,true) &&
            !position_meeting(xx,yy+1,obj_pie) &&
            (isConnected(xx,yy) || isGrounded(xx,yy))
            { draw_set_color(c_green) } else draw_set_color(c_red);
            
            draw_set_blend_mode(bm_add);
            draw_rectangle(xx-8,yy-8,xx+8,yy+8,false);
            draw_sprite(object_get_sprite(_tile),0,xx,yy);
            draw_set_blend_mode(bm_normal);
        }
    }
    
    draw_set_alpha(1);
}

#event draw_gui
if room == rm_menu || hudVisible == false then exit;

///Draw Ui
var dispWidth = viewWidth;
var dispHeight = viewHeight;

var mx = device_mouse_x_to_gui(0);
var my = device_mouse_y_to_gui(0);

if dev == true then draw_text(10,20,"FPS: "+string(fps)+"FPS_REAL: "+string(fps_real));

//Draw Inventory -----------------------------------------
//#region
if invenX > 5
{
    //Inventory background
    //draw_set_alpha(0.9);
    //draw_nineSliceBox(spr_ui_9slice,-10,20,invenX,200,0);
    
    // -- Inventory slots layer 1 --
    for (i=0;i<maxInvenSlots;i++)
    {
        var hotbarCount = 7;
        var column = 7;
        var c = floor(i/column);
        
        if i < hotbarCount
        {
            var x1 = (10+(i*16));
            var x2 = (20+(i*16));
            var y1 = -45;
            var y2 = -35;
        } else
        {
            var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
            var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
            var y1 = -45+(16*c);
            var y2 = -35+(16*c);
        }
        
        var inv_amt = inventorySlotAmt[i];
        
                
        //Draw slots
        draw_set_alpha(1);
        draw_sprite_ext(spr_ui_invenSlot,0,x1,50+y1,0.6,0.6,0,c_white,1);
        
        //Draw selection
        if selectedSlot != noone && i == selectedSlot
        {
            draw_sprite_ext(spr_selectedSlot,image_speed,x1,50+y1,0.6,0.6,0,c_white,1);
        }
        
        //Draw item icon
        var _center = 6; //Center the sprite onto the slot
        draw_sprite_ext(spr_itemDrops,inventorySlotIcon[i],x1+_center,50+y1+_center,0.4,0.4,0,c_white,1);
        
        
        //-- inventory slots layer two --
        
        draw_set_font(global.fnt_Ui);
        draw_set_color(c_white);
        
        //Draw item amount
        if inv_amt > 0 
        {
            var str = string(inv_amt);
            
            if inv_amt >= 1000
            {
                str = string_delete(str,2,3);
                str += "k";
            }
            
            draw_text_transformed(x2-9,y2+47.5,str,0.6,0.6,0);
        }
    }
    
    //Draw tooltip
    if selectedSlot != noone && selectedSlot != "trashSlot"
    {
        scr_drawToolTip(inventorySlotIcon[selectedSlot]);
        var _text = text[0]+"##"+text[1]+"##"+text[2];
        draw_text_transformed(6,2+(16*ceil(maxInvenSlots/7)),_text,0.8,0.8,0);
        /*draw_text_transformed(6,2+(16*floor(maxInvenSlots/7)),text[0],1.25,1.25,0);
        draw_text_transformed(6,21+(16*floor(maxInvenSlots/7)),text[1],1,1,0);
        draw_text_transformed(6,51+(16*floor(maxInvenSlots/7)),text[2],0.8,0.8,0);*/
    }
    
    //- Draw Trash Slot
    var _center = 6; //Center the sprite onto the slot
    var x1 = 106/(invenXMax/invenX);
    var y1 = 4+(16*ceil(maxInvenSlots/7));
    //- slot
    draw_sprite_ext(spr_ui_trashSlot,0,x1,y1,0.6,0.6,0,c_white,1);
    //- item
    draw_sprite_ext(spr_itemDrops,trashSlotIcon,x1+_center,y1+_center,0.5,0.5,0,c_white,1);
    //- amt
    if trashSlotAmt > 0 then draw_text_transformed(x1+4,y1+8,string(trashSlotAmt),0.75,0.75,0);
    
}

//-Draw equipped accessories
if ds_exists(accessories_equipped,ds_type_list)
{
    var list_size = ds_list_size(accessories_equipped);
    
    if list_size > 0
    {
        for(m=0;m<list_size;m++)
        {
            var accessory = accessories_equipped[| m];
            draw_sprite_ext(spr_itemDrops,accessory,viewWidth-10,50+14*m,0.75,0.75,0,c_white,max(0.25,invenX/invenXMax));
        }
    }
}

//----------------Draw Hotbar-----------------------
if invenX <= 5
{

    ///--Layer One--
    for (i=0;i<7;i++)
    {
        var scale = 0.4;
        if selectedSlot == i then scale = 0.65;
        
    
        var x1 = (10+(i*16));
        var x2 = (20+(i*16));
        var y1 = -45;
        var y2 = -35;
        
        var inv_amt = inventorySlotAmt[i];
        
        //Draw hotbar slots
        draw_sprite_ext(spr_ui_invenSlot,0,x1,50+y1,0.6,0.6,0,c_white,1);
        draw_set_alpha(1);
        
        //Draw hotbar selection
        if selectedSlot != noone && i == selectedSlot
        { draw_sprite_ext(spr_selectedSlot,image_index,x1,50+y1,0.6,0.6,0,c_white,1); }
        
        //Draw hotbar item icon
        var _center = 6;
        draw_sprite_ext(spr_itemDrops,inventorySlotIcon[i],x1+_center,50+y1+_center,scale,scale,0,c_white,1);
        
        //Draw hotbar item amount (numbers)
        draw_set_font(global.fnt_Ui);
        draw_set_color(c_white);
        
        if inv_amt > 0 
        {
            var str = string(inv_amt);
            
            if inv_amt >= 1000
            {
                str = string_delete(str,2,3);
                str += "k";
            }
            
            draw_text_transformed(x2-9,y2+47.5,str,0.6,0.6,0);
        }
    }
}
//#endregion
    
//-----Draw cursor item
//#region
if cursorHoldItem == true && drawCursorItem == true
{
    //-Draw item
    draw_sprite_ext(spr_itemDrops,cursorItem,mx,my,0.75,0.75,0,c_white,1);
    
    //-Draw item amount
    if cursorAmt > 0 
    {
        draw_text(mx-8,my+4,string(cursorAmt));
    }
    
    
    //-- Draw item tags
    if cursorTags != undefined
    {
        if ds_exists(cursorTags,ds_type_list)
        { 
            for(i=0;i<ds_list_size(cursorTags);i++)
            {
                draw_text(mx+4,my+10*i,ds_list_find_value(cursorTags,i));
            }
        }
    }
}
//#endregion

//-------------------- Healthbars ---------------------------
//#region
var playerHp = obj_player.hp;

if playerHp > 0
{ draw_nineSliceBox(spr_ui_healthBar,viewWidth-110,10,viewWidth-110+((playerHp)),13,0); }
draw_text(viewWidth-95,10,"HP: "+string(playerHp)+"\"+string(obj_player.maxHp));

//-Red Health vial
draw_nineSliceBox(spr_ui_vial,viewWidth-110,9,viewWidth-10,16,0);

//- Pie health bar
if instance_exists(obj_pie)
{
    var pieHp = obj_pie.hp;

    if pieHp > 0
    { draw_nineSliceBox(spr_ui_pieHealth,viewWidth-110,20,viewWidth-110+((pieHp)),23,0); }
    draw_text(viewWidth-95,20,"HP: "+string(pieHp)+"\"+string(obj_pie.maxHp));
    
    //-Blue health vial
    draw_nineSliceBox(spr_ui_vial,viewWidth-110,19,viewWidth-10,26,0);
}

//- Boss health bar
if worldControl.raidBoss == true
{
    //Boss ID
    var boss = worldControl.raidBossID;
    var bossName = "Null";
    
    //Return the boss's name.
    switch boss.object_index
    {
        //All possible boss objects.
        case obj_bombKing: { bossName = "The Bomb King" } break;
        case obj_sphereKing: {bossName = "The Sphere King"} break;
        case obj_nilmerg: {bossName = "Nilmerg, the Grem-Bee"} break;
        case obj_shadowGremlin: {bossName = "Shadow Gremlin Champion"} break;
    }
    
    if boss != noone
    {
        var bossHp = boss.hp;
        var bossMaxHp = boss.maxHp
        draw_text(18,dispHeight-30,bossName);
        draw_nineSliceBox(spr_ui_healthBar,16,dispHeight-16,(dispWidth-16)*(bossHp/bossMaxHp),dispHeight-8,0);
        draw_nineSliceBox(spr_ui_vial,16,dispHeight-16,dispWidth-16,dispHeight-8,0);
    }
}

// - Energy
if instance_exists(worldControl) && room == rm_zero
{ 
    draw_text(viewWidth-12,30,string(energy));
    draw_sprite(spr_ui_electricity,0,viewWidth-25,30);
}

//#endregion

//-------------------Settings Menu-----------------------------
//#region
if settingsMenu == true
{
    var xx = display_get_gui_width()/2;
    var yy = display_get_gui_height()/2;

    //Draw background
    draw_nineSliceBox(spr_ui_9slice,(xx)-50,(yy)-65,(xx)+50,(yy)+65,0);
    
    //PopMessage Setting
    draw_sprite(spr_ui_selectedBool,showPopMessage,xx-40,yy-40);
    draw_text(xx-32,yy-43,"Damage Numbers");
    
    //Debug setting
    draw_sprite(spr_ui_selectedBool,dev,xx-40,yy-30);
    draw_text(xx-32,yy-33,"Debug Mode");
    
    //toggle background setting
    draw_sprite(spr_ui_selectedBool,showBackground,xx-40,yy-20);
    draw_text(xx-32,yy-23,"Toggle Background");
    
    //toggle music setting
    draw_sprite(spr_ui_selectedBool,musicToggled,xx-40,yy-10);
    draw_text(xx-32,yy-13,"Toggle Music");
    
    //keybind setting
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy);
    draw_text(xx-32,yy-3,"Change Keybinds");
    
    //Draw save and exit button
    draw_nineSliceBox(spr_ui_button,xx-20,yy+40,xx+20,yy+50,0);
    draw_text(xx-15,yy+45,"Leave");
    
}
else if keybindMenu_visible == true
{
    //Draw the keybinding menu!
    var xx = display_get_gui_width()/2;
    var yy = display_get_gui_height()/2;

    //-Draw background
    draw_nineSliceBox(spr_ui_9slice,(xx)-50,(yy)-65,(xx)+50,(yy)+65,0);
    
    //-Movement keys
    //-- jump
    draw_sprite(spr_ui_selectedBool,1,xx-40,yy-40);
    draw_text(xx-32,yy-43,"Jump: "+chr(global.key_jump));

    //-- left
    draw_sprite(spr_ui_selectedBool,dev,xx-40,yy-30);
    draw_text(xx-32,yy-33,"Move Left: "+chr(global.key_left));
    
    //-- right
    draw_sprite(spr_ui_selectedBool,showBackground,xx-40,yy-20);
    draw_text(xx-32,yy-23,"Move Right: "+chr(global.key_right));
    
    //-- down
    draw_sprite(spr_ui_selectedBool,musicToggled,xx-40,yy-10);
    draw_text(xx-32,yy-13,"Move Down: "+chr(global.key_down));
    
    //- Ui keys
    //-- Inventory
    draw_sprite(spr_ui_selectedBool,musicToggled,xx-40,yy);
    draw_text(xx-32,yy-3,"Open Inventory: "+chr(global.key_inven));
    
    //-- Crafting Menu
    draw_sprite(spr_ui_selectedBool,musicToggled,xx-40,yy+10);
    draw_text(xx-32,yy+7,"Crafting Menu: "+chr(global.key_craft));
    
    //-- Interact
    draw_sprite(spr_ui_selectedBool,musicToggled,xx-40,yy+20);
    draw_text(xx-32,yy+17,"Interact: "+chr(global.key_interact));
    
    //Draw save and exit button
    draw_nineSliceBox(spr_ui_button,xx-20,yy+40,xx+20,yy+50,0);
    draw_text(xx-15,yy+45,"Go Back");
}

//------------------Quests/Task List--------------------------
if room == rm_tutorial
{
    if showTaskList == true
    {
        var xx = display_get_gui_width();
        var yy = 0;
        
        //Draw text
        var str = scr_getTaskText(currentTask);
        var str_length = string_length(str)*2.25;
        if (str_length > viewWidth/2) then str_length = viewWidth/2;
        draw_text_transformed(x+viewWidth/2-str_length,y+30,str,1.25,1.25,0);
    }
}
//#endregion

//-------------------Wave Progress Meter----------------------
//#region
if interm == false
{
    draw_text(10,dispHeight-13,"Raid Progress: ");
    draw_sprite_stretched(spr_nullLight,0,0,dispHeight-4,dispWidth,dispHeight-2);
    draw_sprite_stretched(spr_ui_waveProgress,0,0,dispHeight-4,(raidProgress/maxRaidProgress)*dispWidth,dispHeight-2);
}
//#endregion

//--------------------Super Menu Control----------------------

switch ui_state
{
    case "CRAFT":
    {
//-----------------Crafting Menu---------------------------------------
//#region

    //- draw background
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    
    draw_set_alpha(0.75);
    draw_nineSliceBox(spr_ui_9slice, _posX,_posY,250+_posX,200+_posY,0);
    draw_set_alpha(1);
    
    //draw crafting buttons
    for(i=0;i<sprite_get_number(spr_itemDrops);i++)
    {
        if scr_checkCraftingIndex(i)
        {
            var size = 35; //The size of the distance between slots - the actual size of the slots.
            var column = 7;
            var c = floor(drawn_crafting_slots/column);
            
            var x1 = _posX+10+(drawn_crafting_slots*size)-(c*size*column);
            var x2 = _posX+30+(drawn_crafting_slots*size)-(c*size*column);
            var y1 = _posY+5+(size*c);
            var y2 = _posY+25+(size*c);
            
            //Draw Slots
            draw_sprite(spr_ui_invenSlot,0,x1,y1);
            
            //Draw items
            var _center = 10;
            draw_sprite(spr_itemDrops,i,x1+_center,y1+_center);
            
            //Draw crafting tooltip
            if craftSelect != -1
            {
                draw_set_color(c_white);
                scr_craftingToolTip(craftSelect);
                draw_text_transformed(130,134,text[0],1.25,1.25,0);
                draw_text_transformed(131,155,text[1],1,1,0);
                draw_text_transformed(131,175,"Items Needed: "+text[2],1,1,0);
            }
            
            drawn_crafting_slots += 1;
            
            //reset draw_crafting_slots
            if i == sprite_get_number(spr_itemDrops)-1 then drawn_crafting_slots = 0;
        }
    }

//#endregion
    }
    break;

    case "UPGRADE":
    {
//-----------------Upgrade Menu-----------------------------
//#region

    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;

    draw_set_alpha(0.75);
    draw_nineSliceBox(spr_ui_9slice, _posX,_posY,250+_posX,200+_posY,0);
    draw_set_alpha(1);
    
    //- INIT BUTTONS
    var h_size = 36;
    var v_size = 12;
    
    //NOTE: Adding 32 to the y value every new button
    //- Regeneration Upgrade button
    var xx = 8+h_size;
    var yy = 8+v_size;
    
    draw_nineSliceBox(spr_ui_button,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy,0);
    draw_text((_posX-2.25*string_length("Regen Level"))+xx,_posY-(v_size/2)+yy,"Regen Level#Cost: "+string(tileRegenRate*25));
    draw_text_transformed(_posX+(xx*2)+5,_posY-(v_size/2)+yy,"Increase the rate at which a#player, pie, and tile#health regenerates during the day.#Regeneration Level: "+string(60-(60-tileRegenRate)),0.75,0.75,1);
    
    //- Tile base HP Upgrade button
    var xx = 8+h_size;
    var yy = 40+v_size;
    
    draw_nineSliceBox(spr_ui_button,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy,0);
    draw_text((_posX-2.5*string_length("Tile Level"))+xx,_posY-(v_size/2)+yy,"Tile Level#Cost: "+string(tileLevel*50));
    draw_text_transformed(_posX+(xx*2)+5,_posY-(v_size/2)+yy,"Increase tile strength and#amount regenerated.#Tile Level: "+string(tileLevel),0.75,0.75,1);
    
    //- Electricity storage
    var xx = 8+h_size;
    var yy = 72+v_size;
    
    draw_nineSliceBox(spr_ui_button,_posX-h_size+xx,_posY-v_size+yy,_posX+h_size+xx,_posY+v_size+yy,0);
    draw_text((_posX-2.5*string_length("Power Storage"))+xx,_posY-(v_size/2)+yy,"Power Storage#Cost: "+string((energyMax-4)*100));
    draw_text_transformed(_posX+(xx*2)+5,_posY-(v_size/2)+yy,"Increases power storage capacity.#Max capacity: "+string(energyMax),0.75,0.75,1);
    
    draw_set_alpha(1);
    
    }
    break;
    
    case "MOD":
    {
        //-------Mod menu-----
        var size = 16;
        var xOff = 70;
        var yOff = 100;
        var x1 = (_posX)-size+xOff;
        var y1 = (_posY)-size+yOff;
        var x2 = (_posX)+size+xOff;
        var y2 = (_posY)+size+yOff;
        
        draw_set_font(global.fnt_Ui);
        
        //Tag and Equipment Slots respectively
        draw_nineSliceBox(spr_ui_9slice_small,x1,y1,x2,y2,0);
        draw_nineSliceBox(spr_ui_9slice_small,x1+50,y1,x2+50,y2,0);
        
        //Draw icons
        if selectedTag != noone 
        { 
            draw_sprite(spr_itemDrops,ITEMID.item_modTag,(x1+x2)/2,(y1+y2)/2);
            if ds_exists(selectedTag,ds_type_list)
            { draw_text(((x1+x2)/2)-13,((y1+y2)/2)+25,ds_list_find_value(selectedTag,0)); }
        }
        
        if selectedEquipment != noone 
        { 
            draw_sprite(spr_itemDrops,equipmentIcon,(x1+x2+100)/2,(y1+y2)/2);
        } //MN: 50+50 = 100; 50 is MN for equip slot placement.
        
        //Draw mod complete
        draw_nineSliceBox(spr_ui_modConfirm,x1+110,y1,x2+110,y2,modCanConfirm);
        
        if modCanConfirm == true
        {
            draw_sprite(spr_itemDrops,equipmentIcon,(x1+x2+220)/2,(y1+y2)/2);
        }
    }
    break;
    
    //#endregion
}

#event keyrelease:vk_escape|Clear Ui or Open Settings

//Settings menu
if invOpen == false && showCraftingMenu == false
{ settingsMenu = !settingsMenu; }

//Close other menus
if invOpen == true then invOpen = false;
if showCraftingMenu == true then showCraftingMenu = false;
if keybindMenu_visible = true then keybindMenu_visible = false;

#event keyrelease:1|Select slot 1
if room == rm_menu then exit;
if obj_player.toolReady == true
{
    selectedSlot = 0;
    scr_slotEquip(0);
    
    //Reset building
    lastPlaceX = 0;
    lastPlaceY = -16;
} else equipQueue = 0;

#event keyrelease:2|Select slot 2
if room == rm_menu then exit;
if obj_player.toolReady == true
{
    selectedSlot = 1;
    scr_slotEquip(1);
    
    //Reset building
    lastPlaceX = 0;
    lastPlaceY = -16;
} else equipQueue = 1;

#event keyrelease:3|Select slot 3
if room == rm_menu then exit;
if obj_player.toolReady == true
{
    selectedSlot = 2;
    scr_slotEquip(2);
    
    //Reset building
    lastPlaceX = 0;
    lastPlaceY = -16;
} else equipQueue = 2;

#event keyrelease:4|Select slot 4
if room == rm_menu then exit;
if obj_player.toolReady == true
{
    selectedSlot = 3;
    scr_slotEquip(3);
    
    //Reset building
    lastPlaceX = 0;
    lastPlaceY = -16;
} else equipQueue = 3;

#event keyrelease:5|Select slot 5
if room == rm_menu then exit;
if obj_player.toolReady == true
{
    selectedSlot = 4;
    scr_slotEquip(4);
    
    //Reset building
    lastPlaceX = 0;
    lastPlaceY = -16;
    
} else equipQueue = 4;

#event keyrelease:6|Select slot 6
if room == rm_menu then exit;
if obj_player.toolReady == true
{
    selectedSlot = 5;
    scr_slotEquip(5);
    
    //Reset building
    lastPlaceX = 0;
    lastPlaceY = -16;
} else equipQueue = 5;

#event keyrelease:7|Select slot 7
if room == rm_menu then exit;
if obj_player.toolReady == true
{
    selectedSlot = 6;
    scr_slotEquip(6);
    
    //Reset building
    lastPlaceX = 0;
    lastPlaceY = -16;
} else equipQueue = 6;

#event keyrelease:vk_numpad2
hudVisible = !hudVisible;