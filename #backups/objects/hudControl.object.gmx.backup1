// 2020-08-30 12:22:37
#event create
globalvar weaponIcon,pickaxeIcon,maxInvenSlots;
weaponIcon = spr_swordGreen;
pickaxeIcon = spr_pickaxe;

image_speed = 30/60;

//Inventory
/*NOTE: If the hitboxes for the inventory need to be updated in the future,
    define them here and update them in here, because each event having a local
    set of inventory coordinates is very annoying to update :P.
*/

invOpen = false;
invenXMax = 125;
invenX = 0;
maxInvenSlots = 28;
cursorHoldItem = false;
cursorItem = noone;
cursorAmt = noone;
cursorSlot = noone;
cursorTags = noone;
selectedSlot = noone;
drawCursorItem = false;
d_click = false;
equippedSlot_weapon = 0;
equippedSlot_pickaxe = 1;
pickupTimer = 0; //When right clicking a slot - how long until multiple items will be taken.
pickupTimerMax = 30; //The interval when a single item will be taken out of a slot.
pickupTimerRate = 10;
craftTimer = 0;
craftTimerMax = 30;
craftTimerRate = 10;
equipQueue = noone;

//Crafting Menu
showCraftingMenu = false;
craftingMenu = 0; //Nothing
currentCraftingSlots = 20;
craftingSpriteSet = 0;
craftIndex = -1; //The CRAFTING ID of the item to craft
craftSelect = -1;
craftBuffer = 0; //Last Item crafted

//Mod Menu
selectedTag = noone;
selectedEquipment = noone;
selectedType = noone;
equipmentIcon = noone;
equipmentTags = noone;
modCanConfirm = false;

//Inventory Slots
//- initialize array length to avoid memory error.
inventorySlotIcon[maxInvenSlots-1] = 0;
inventorySlotAmt[maxInvenSlots-1] = 0;
inventorySlotType[maxInvenSlots-1] = 0;
inventorySlotTags[maxInvenSlots-1] = noone; //Each slot has '3' tag slots.


for (i=0;i<maxInvenSlots;i++)
{
    inventorySlotIcon[i] = 0; //Nothing
    inventorySlotAmt[i] = 0; //No items
    inventorySlotType[i] = 0; //Default item. '1' for equippable tool.
    inventorySlotTags[i] = noone; //No tags
}

//Settings menu
settingsMenu = false; //Whether settings menu is visible or not.
showPopMessage = true; //Whether or not to use popMessages.
showTaskList = true; //Show the player's tasks.

//Place Tiles
lastPlaceX = noone;
lastPlaceY = noone;



#event alarm1|Reset crafting slots
currentCraftingSlots = 0;
craftingSpriteSet = 0;

#event step
if invOpen == true
    { if invenX < invenXMax then invenX += (invenXMax-invenX)*0.2; } 
    else { if invenX >= -10 then invenX += (0-invenX)*0.2; }
    
//Fire equipment queue
if obj_player.toolReady == true && equipQueue != noone
{
    selectedSlot = equipQueue;
    scr_slotEquip(equipQueue);
    equipQueue = noone;
}

//Crafting tooltip
if showCraftingMenu == true && craftingMenu != 0
{
    var _posX = view_wview[0]/2-120;
    var _posY = view_hview[0]/2-105;
    var dx = device_mouse_x_to_gui(0);
    var dy = device_mouse_y_to_gui(0);
    
    if point_in_rectangle(dx,dy,_posX,_posY,250+_posX,200+_posY)
    {   
        for(i=0;i<currentCraftingSlots;i++)
        {
            var size = 35; //The size of the distance between slots - the actual size of the slots.
            var column = 7;
            var c = floor(i/column);
            
            var x1 = _posX+10+(i*size)-(c*size*column);
            var x2 = _posX+30+(i*size)-(c*size*column);
            var y1 = _posY+5+(size*c);
            var y2 = _posY+25+(size*c);
            
            //Get Crafting ID of slot
            if point_in_rectangle(dx,dy,x1,y1,x2,y2)
            { craftSelect = i; }
        }
    }
}

#event mouse_global_left_button|Crafting interaction
if obj_player.dead == false
{
    if craftingMenu != 0 && showCraftingMenu == true
    {
        var _posX = view_wview[0]/2-120;
        var _posY = view_hview[0]/2-105;
        var dx = device_mouse_x_to_gui(0);
        var dy = device_mouse_y_to_gui(0);
        
            //This function represents the crafting menu as a whole.
        if point_in_rectangle(dx,dy,_posX,_posY,250+_posX,200+_posY)
        {   
            for(i=0;i<currentCraftingSlots;i++)
            {
                var size = 35; //The size of the distance between slots - the actual size of the slots.
                var column = 7;
                var c = floor(i/column);
                
                var x1 = _posX+10+(i*size)-(c*size*column);
                var x2 = _posX+30+(i*size)-(c*size*column);
                var y1 = _posY+5+(size*c);
                var y2 = _posY+25+(size*c);
                
                //Get Crafting ID of slot
                if point_in_rectangle(dx,dy,x1,y1,x2,y2)
                { 
                    craftIndex = i; 
                    craftSelect = i;
                    
                    if craftTimer == 0 
                    { scr_craftItem(scr_getCraftingIndex(craftingMenu,craftIndex)); }
                    
                    break; 
                } else craftIndex = -1;
            }
            
            craftTimer += 1;
            
            if craftTimer >= craftTimerMax
            {
                craftTimer = 1;
                
                if craftTimerMax > 5 then craftTimerMax -= craftTimerRate;
                if craftIndex != -1// && craftTimer > craftTimerMax 
                { 
                    scr_craftItem(scr_getCraftingIndex(craftingMenu,craftIndex)); 
                    craftBuffer = craftIndex;
                } 
            }
            
        } else if craftingMenu != "menu_mod" { craftIndex = -1; craftSelect = -1; showCraftingMenu = false; }
    } else { craftIndex = -1; craftSelect = -1; }
}
#section|Slot interaction
var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

var hotbarOffset = -45;

//Hotbar and inventory interaction

if invOpen == true
{
    if point_in_rectangle(dx,dy,0,50+hotbarOffset,invenX,200)
    {
        if cursorHoldItem = false
        {
            for (i=0;i<maxInvenSlots;i++)
            {
                //inventory slots
                var column = 7;
                var c = floor(i/column);
                
                var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
                var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
                var y1 = -45+(16*c);
                var y2 = -35+(16*c);
                
                //Hotbar slots
                var x3 = (10+(i*16));
                var x4 = (20+(i*16));
                var y3 = -45;
                var y4 = -35;
                
                //Interaction
                if point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) && cursorHoldItem == false || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4) && cursorHoldItem == false
                {
                    cursorHoldItem = true;
                    cursorItem = inventorySlotIcon[i];
                    cursorAmt = inventorySlotAmt[i];
                    cursorType = inventorySlotType[i];
                    cursorSlot = i;
                    cursorTags = inventorySlotTags[i];
                    break;
                }
            }
        }
        
        //Draw slot and cursor embelishments
        if cursorSlot != noone
        {
            selectedSlot = cursorSlot;
            drawCursorItem = true;
        }
    }
}
#section|Place blocks
if room == rm_lobby then exit;

var xx = round(mouse_x/16)*16;
var yy = round(mouse_y/16)*16;

if (lastPlaceX != xx || lastPlaceY != yy) && selectedSlot != noone
{
    for(i=0;i<maxInvenSlots;i++)
    {
        //inventory slots
        var column = 7;
        var c = floor(i/column);
        
        var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
        var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
        var y1 = 5+(16*c);
        var y2 = 15+(16*c);
        
        //Hotbar slots
        var x3 = (10+(i*16));
        var x4 = (20+(i*16));
        var y3 = -15;
        var y4 = -5;
    
        //------------------Place Blocks-------------------------------------
        if i == selectedSlot
        {
            //The whole hotbar section.
            var _x1 = 10;
            var _x2 = 10+(7*16);
        
            if showCraftingMenu == false && !point_in_rectangle(dx,dy,_x1,50+y3,_x2,50+y4) && cursorHoldItem == false
            {
                if inventorySlotType[selectedSlot] == 3 && obj_player.tool == 3
                {
                    
                    //Single place
                    if !position_meeting(xx,yy,TILE_ALL) 
                    && point_distance(obj_player.x,obj_player.y,mouse_x,mouse_y) <= 16*3 //3 tiles worth of distance.
                    && collision_rectangle(xx-15,yy-15,xx+15,yy+15,TILE_ALL,false,false) //|| collision_point(xx,yy+16,obj_platform,false,false) )
                    && !collision_rectangle(xx-8,yy-8,xx+8,yy+8,obj_player,false,true) 
                    && !collision_rectangle(xx-8,yy-8,xx+8,yy+8,ENEMY,false,true)
                    {
                        if inventorySlotAmt[selectedSlot] > 0
                        {
                            instance_create(xx,yy,scr_invenTileIndex(inventorySlotIcon[selectedSlot]));
                            scr_tileUpdate(xx,yy);
                            scr_invenRemoveItem(0,1,3,false,selectedSlot,noone);
                            if inventorySlotAmt[selectedSlot] == 0 then selectedSlot = noone;
                            lastPlaceX = xx;
                            lastPlaceY = yy;
                            break;
                        }
                    }
                }
            }
        }
    }
}

#event mouse_global_right_button|Slot interaction - single item
var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

var hotbarOffset = -45;

//Hotbar and inventory interaction

if invOpen == true
{
    if point_in_rectangle(dx,dy,0,50+hotbarOffset,invenX,200)
    {
        if cursorHoldItem = false
        {
            for (i=0;i<28;i++)
            {
                //inventory slots
                var column = 7;
                var c = floor(i/column);
                
                var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
                var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
                var y1 = -45+(16*c);
                var y2 = -35+(16*c);
                
                //Hotbar slots
                var x3 = (10+(i*16));
                var x4 = (20+(i*16));
                var y3 = -45;
                var y4 = -35;
                
                //Interaction
                if point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) && cursorHoldItem == false && inventorySlotAmt[i] > 0
                || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4) && cursorHoldItem == false && inventorySlotAmt[i] > 0
                {
                    cursorHoldItem = true;
                    cursorItem = inventorySlotIcon[i];
                    cursorAmt = 1;
                    cursorType = inventorySlotType[i];
                    cursorSlot = i;
                    cursorTags = inventorySlotTags[i];
                    
                    break;
                }
            }
        } 
        else
        {
            pickupTimer += 1;
            if pickupTimer >= pickupTimerMax
            {
                if cursorAmt < inventorySlotAmt[cursorSlot]
                { cursorAmt += 1; }
                pickupTimer = 0;
                pickupTimerRate += 2;
                if pickupTimerMax > 0 then pickupTimerMax -= pickupTimerRate;
            }
        }
        
        //Draw slot and cursor embelishments
        if cursorSlot != noone
        {
            selectedSlot = cursorSlot;
            drawCursorItem = true;
        }
    }
}

#event mouse_global_left_release|Inventory Interaction
var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);


//---------- MOD BENCH FUNCTIONALITY ---------------

if cursorHoldItem == true && craftingMenu == "menu_mod"
{
    //The dimensions of the menu's slots, as defined in the draw event.
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    var size = 16;
    var xOff = 70;
    var yOff = 100;
    var x1 = (_posX)-size+xOff;
    var y1 = (_posY)-size+yOff;
    var x2 = (_posX)+size+xOff;
    var y2 = (_posY)+size+yOff;
    
    //-- Tag Slot
    if (cursorItem == ITEMID.item_modTag) && point_in_rectangle(dx,dy,x1,y1,x2,y2)
    {
        selectedTag = cursorTags;
    }
    
    //-- Equipment Slot
    if (cursorType == ITEMTYPE.weapon || cursorType == ITEMTYPE.pickaxe) && point_in_rectangle(dx,dy,x1+50,y1,x2+50,y2)
    {
        selectedEquipment = cursorItem;
        selectedType = cursorType;
        equipmentIcon = cursorItem;
        equipmentTags = cursorTags;
    }
    
    //-- Activate confirmation
    if selectedEquipment != noone && selectedTag != noone
    {
        modCanConfirm = true;
    }
}
else if showCraftingMenu == true && craftingMenu == "menu_mod"
{
    //-- Create new item
    if modCanConfirm == true && point_in_rectangle(dx,dy,x1+110,y1,x2+110,y2)
    {
        print("Check")
        
        if !ds_exists(equipmentTags,ds_type_list)
        { equipmentTags = ds_list_create(); }
        
        ds_list_add(equipmentTags,selectedTag[| 0]); 
        
        //Remove
        scr_invenRemoveItem(ITEMID.item_modTag,1,ITEMTYPE.def,false,-1,selectedTag);
        scr_invenRemoveItem(selectedEquipment,-1,selectedType,false,-1,equipmentTags);
        
        
        //Reset if successful
        if scr_invenAddItem(selectedEquipment,0,selectedType,equipmentTags) != -1
        {
            scr_hudMessage("Modification success!",global.fnt_Ui,5,equipmentIcon,c_aqua,0);
            event_user(0);
        } else scr_hudMessage("Modification failed.",global.fnt_Ui,5,0,c_red,0);
    }
}

//--------- INVENTORY INTERACTIONS -------------
for (i=0;i<maxInvenSlots;i++)
{
    //inventory slots
    var column = 7;
    var c = floor(i/column);
    
    var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
    var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
    var y1 = -45+(16*c);
    var y2 = -35+(16*c);
    
    //Hotbar slots
    var x3 = (10+(i*16));
    var x4 = (20+(i*16));
    var y3 = -45;
    var y4 = -35;

    if cursorHoldItem == true
    {
        
        
        //---------- SET AN ITEM IN A SLOT -----------------------------
        
        if (point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4))
        {
        
        //-----------------------------Copy current item and place in old slot if need be.----------------------------
            if i != cursorSlot
            {
            
            
            //- Replace slots with cursor item.
                //-- Case: The new slot is the same item & can be stacked.
                if inventorySlotIcon[i] == cursorItem && inventorySlotAmt[i] > 0 //0 AMT means an item cannot be stacked, otherwise it would be 1.
                {  
                    
                    //-Update the slot previously picked up.
                        //-- Case: the old slot will have no AMT left.
                    if inventorySlotAmt[cursorSlot]-cursorAmt == 0
                    {
                        inventorySlotIcon[cursorSlot] = 0;
                        inventorySlotType[cursorSlot] = 0;
                        inventorySlotAmt[cursorSlot] = 0;
                        inventorySlotTags[cursorSlot] = 0;
                    } 
                    else //Case: the old slot will have left-over items.
                    { inventorySlotAmt[cursorSlot] = inventorySlotAmt[cursorSlot]-cursorAmt; }
                   
                    //Update amount in cursor 
                    cursorAmt += inventorySlotAmt[i];
                    
                } else if inventorySlotIcon[i] != 0
                {
                    //Remove items to prevent deletion
                    if cursorAmt != inventorySlotAmt[cursorSlot]
                    {
                        scr_invenRemoveItem(inventorySlotIcon[cursorSlot],
                                            inventorySlotAmt[cursorSlot]-cursorAmt,
                                            inventorySlotType[cursorSlot],
                                            true,cursorSlot,inventorySlotTags[cursorSlot]);
                    }
                
                    //Copy current slot and update the cursorSlot.
                    inventorySlotIcon[cursorSlot] = inventorySlotIcon[i];
                    inventorySlotAmt[cursorSlot] = inventorySlotAmt[i];
                    inventorySlotType[cursorSlot] = inventorySlotType[i];
                    inventorySlotTags[cursorSlot] = inventorySlotTags[i];
                }
                else
                {
                    if inventorySlotAmt[cursorSlot]-cursorAmt == 0
                    {
                        inventorySlotIcon[cursorSlot] = 0;
                        inventorySlotType[cursorSlot] = 0;
                        inventorySlotAmt[cursorSlot] = 0;
                        inventorySlotTags[cursorSlot] = 0;
                    } 
                    else
                    { inventorySlotAmt[cursorSlot] = inventorySlotAmt[cursorSlot]-cursorAmt; }
                }
    
                
                //Place item in new slot
                cursorHoldItem = false;
                inventorySlotIcon[i] = cursorItem;
                inventorySlotType[i] = cursorType;
                inventorySlotAmt[i] = cursorAmt;
                inventorySlotTags[i] = cursorTags;
                
                selectedSlot = noone;
                pickupTimer = 0;
                pickupTimerMax = 60;
                pickupTimerRate = 4;
                
                exit;
            }
        } else if i == cursorSlot && (showCraftingMenu == false && craftingMenu != "menu_mod") && !point_in_rectangle(dx,dy,0,50-45,invenX,200) { scr_invenRemoveItem(cursorItem,cursorAmt,cursorType,true,cursorSlot,cursorTags); selectedSlot = noone; break; }
    }
    
    
    
    //----------------Click to select a slot-------------------
    if (point_in_rectangle(dx,dy,x1,50+y1,x2,50+y2) || point_in_rectangle(dx,dy,x3,50+y3,x4,50+y4))
     && obj_player.toolReady == true
    {
        selectedSlot = i;
        scr_slotEquip(i);
        break;
    }
}



//Ensure variable reset
cursorHoldItem = false;
cursorItem = noone;
cursorAmt = noone;
cursorSlot = noone;
cursorType = noone;
cursorTags = noone;


///Crafting timer reset
craftTimer = 0;
craftTimerMax = 40;
#section|Settings interactions
if settingsMenu = true
{
    ///Settings menu interaction
    var xx = display_get_gui_width()/2;
    var yy = display_get_gui_height()/2;
    var mx = device_mouse_x_to_gui(0);
    var my = device_mouse_y_to_gui(0);
    var hbox = 4;
    
    //Show Pop Messages
    
    //- settings
    //-- In this case, xx-40 and yy-40 are constants denoting the center of the selectionBool sprite.
    if point_in_rectangle(mx,my,xx-40-hbox,yy-40-hbox,xx-40+hbox,yy-40+hbox)
    { showPopMessage = !showPopMessage; }
    
    //- Debug mode
    if point_in_rectangle(mx,my,xx-40-hbox,yy-30-hbox,xx-40+hbox,yy-30+hbox)
    { dev = !dev; show_debug_overlay(dev); }
    
    
    //- Exit button
    if point_in_rectangle(mx,my,xx-20,yy+40,xx+20,yy+50)
    {
        //Save the game
        with gameControl event_user(0);
        scr_roomTransition("WARP","Warping to: The Place Betwixt Time...",global.fnt_menu,c_white,45/60,rm_lobby);
    }
}

#event mouse_global_right_release
pickupTimerMax = 30;
pickupTimer = 28;
pickupTimerRate = 2;

var dx = device_mouse_x_to_gui(0);
var dy = device_mouse_y_to_gui(0);

//Hotbar+inventory coordinates
if !point_in_rectangle(dx,dy,0,50-45,invenX,200) && showCraftingMenu == false
{
    if cursorHoldItem == true
    { scr_invenRemoveItem(cursorItem,cursorAmt,cursorType,true,cursorSlot,cursorTags); }
    
    cursorHoldItem = false;
    cursorItem = noone;
    cursorAmt = noone;
    cursorSlot = noone;
    cursorType = noone;
    cursorTags = noone;
}
else 
{ 
    var _posX = viewWidth/2-120;
    var _posY = viewHeight/2-105;
    var size = 16;
    var xOff = 70;
    var yOff = 100;
    var x1 = (_posX)-size+xOff;
    var y1 = (_posY)-size+yOff;
    var x2 = (_posX)+size+xOff;
    var y2 = (_posY)+size+yOff;
    
    if (showCraftingMenu == true && craftingMenu == "menu_mod")
    {
        //Clear mod slots
        //- Tag Slot
        if point_in_rectangle(dx,dy,x1,y1,x2,y2)
        {
            selectedTag = noone;
        }
        else if point_in_rectangle(dx,dy,x1+50,y1,x2+50,y2)
        {
            //-Equipment Slot
            selectedEquipment = noone;
            selectedType = noone;
            equipmentTags = noone;
            equipmentIcon = 0;
        }
    }
}

#event other_user0|Initialize Mod Bench

selectedEquipment = noone;
selectedType = noone;
equipmentIcon = 0;
equipmentTags = noone;
selectedTag = noone;
modCanConfirm = false;


#event draw|Building indicator
if room == rm_zero
{
    var xx = round(mouse_x/16)*16;
    var yy = round(mouse_y/16)*16;
    
    var mouse_distance_to_player = point_distance(xx,yy,obj_player.x,obj_player.y);
    
    if selectedSlot != noone && mouse_distance_to_player < 3*16
    {
        if inventorySlotType[selectedSlot] == 3
        {
            
            draw_set_alpha(0.5);
        
            if !position_meeting(xx,yy,TILE_ALL) && 
            !collision_rectangle(xx-8,yy-8,xx+8,yy+8,obj_player,false,true) && 
            !collision_rectangle(xx-8,yy-8,xx+8,yy+8,ENEMY,false,true) &&
            collision_rectangle(xx-15,yy-15,xx+15,yy+15,TILE_ALL,false,false)
            { draw_set_color(c_green) } else draw_set_color(c_red);
            
            draw_rectangle(xx-8,yy-8,xx+8,yy+8,false);
        }
    }
    
    draw_set_alpha(1);
}

#event draw_gui|Draw Ui
var dispWidth = viewWidth;
var dispHeight = viewHeight;

var mx = device_mouse_x_to_gui(0);
var my = device_mouse_y_to_gui(0);

//Draw Inventory -----------------------------------------
//#region
if invenX > 5
{
    //Inventory background
    //draw_set_alpha(0.9);
    //draw_nineSliceBox(spr_ui_9slice,-10,20,invenX,200,0);
    
    // -- Inventory slots layer 1 --
    for (i=0;i<maxInvenSlots;i++)
    {
        var hotbarCount = 7;
        var column = 7;
        var c = floor(i/column);
        
        if i < hotbarCount
        {
            var x1 = (10+(i*16));
            var x2 = (20+(i*16));
            var y1 = -45;
            var y2 = -35;
        } else
        {
            var x1 = (10+(i*16)-(c*16*column))*(invenX/invenXMax);
            var x2 = (20+(i*16)-(c*16*column))*(invenX/invenXMax);
            var y1 = -45+(16*c);
            var y2 = -35+(16*c);
        }
                
        //Draw slots
        draw_set_alpha(1);
        draw_sprite_ext(spr_ui_invenSlot,0,x1,50+y1,0.6,0.6,0,c_white,1);
        
        //Draw selection
        if selectedSlot != noone && i == selectedSlot
        {
            draw_sprite_ext(spr_selectedSlot,image_speed,x1,50+y1,0.6,0.6,0,c_white,1);
        }
        
        //Draw item icon
        var _center = 6; //Center the sprite onto the slot
        draw_sprite_ext(spr_itemDrops,inventorySlotIcon[i],x1+_center,50+y1+_center,0.5,0.5,0,c_white,1);
        
        
        //-- inventory slots layer two --
        
        draw_set_font(global.fnt_Ui);
        draw_set_color(c_white);
        
        //Draw item amount
        if inventorySlotAmt[i] > 0 then draw_text_transformed(x2-8,y2+46.5,string(inventorySlotAmt[i]),0.75,0.75,0);
    }
    
    //Draw tooltip
    if selectedSlot != noone
    {
        scr_drawToolTip(inventorySlotIcon[selectedSlot]);
        draw_text_transformed(6,119,text[0],1.25,1.25,0);
        draw_text_transformed(6,140,text[1],1,1,0);
    }
}

//----------------Draw Hotbar-----------------------
if invenX <= 5
{

    ///--Layer One--
    for (i=0;i<7;i++)
    {
        var scale = 0.5;
        if selectedSlot == i then scale = 0.65;
        
    
        var x1 = (10+(i*16));
        var x2 = (20+(i*16));
        var y1 = -45;
        var y2 = -35;
        
        //Draw hotbar slots
        draw_sprite_ext(spr_ui_invenSlot,0,x1,50+y1,0.6,0.6,0,c_white,1);
        draw_set_alpha(1);
        
        //Draw hotbar selection
        if selectedSlot != noone && i == selectedSlot
        { draw_sprite_ext(spr_selectedSlot,image_index,x1,50+y1,0.6,0.6,0,c_white,1); }
        
        //Draw hotbar item icon
        var _center = 6;
        draw_sprite_ext(spr_itemDrops,inventorySlotIcon[i],x1+_center,50+y1+_center,scale,scale,0,c_white,1);
        
        //Draw hotbar item amount (numbers)
        draw_set_font(global.fnt_Ui);
        draw_set_color(c_white);
        if inventorySlotAmt[i] > 0 then draw_text_transformed(x2-8,y2+46.5,string(inventorySlotAmt[i]),0.75,0.75,0);
    }
}
//#endregion

//-----------------Crafting Menu---------------------------------------
//#region
if room == rm_zero
{
    if showCraftingMenu == true
    {
        //- draw background --Change to NineSliceBox
        var _posX = viewWidth/2-120;
        var _posY = viewHeight/2-105;
        
        draw_set_alpha(0.75);
        draw_nineSliceBox(spr_ui_9slice, _posX,_posY,250+_posX,200+_posY,0);
        draw_set_alpha(1);
        
        //draw crafting buttons
        if ( craftingSpriteSet != noone && craftingMenu != "menu_mod" )
        {
            for(i=0;i<currentCraftingSlots;i++)
            {
                var size = 35; //The size of the distance between slots - the actual size of the slots.
                var column = 7;
                var c = floor(i/column);
                
                var x1 = _posX+10+(i*size)-(c*size*column);
                var x2 = _posX+30+(i*size)-(c*size*column);
                var y1 = _posY+5+(size*c);
                var y2 = _posY+25+(size*c);
                
                //Draw Slots
                draw_sprite(spr_ui_invenSlot,0,x1,y1);
                
                //Draw items
                var _center = 10;
                draw_sprite(craftingSpriteSet,i,x1+_center,y1+_center);
                
                //Draw crafting tooltip
                if craftSelect != -1
                {
                    draw_set_color(c_white);
                    scr_craftingToolTip(craftingMenu,craftSelect);
                    draw_text_transformed(120,134,text[0],1.25,1.25,0);
                    draw_text_transformed(121,155,text[1],1,1,0);
                    draw_text_transformed(121,175,"Items Needed: "+text[2],1,1,0);
                }
            }
        } 
        else if craftingMenu == "menu_mod"
        {
            //-------Mod menu-----
            var size = 16;
            var xOff = 70;
            var yOff = 100;
            var x1 = (_posX)-size+xOff;
            var y1 = (_posY)-size+yOff;
            var x2 = (_posX)+size+xOff;
            var y2 = (_posY)+size+yOff;
            
            draw_set_font(global.fnt_Ui);
            
            //Tag and Equipment Slots respectively
            draw_nineSliceBox(spr_ui_9slice,x1,y1,x2,y2,0);
            draw_nineSliceBox(spr_ui_9slice,x1+50,y1,x2+50,y2,0);
            
            //Draw icons
            if selectedTag != noone 
            { 
                draw_sprite(spr_itemDrops,ITEMID.item_modTag,(x1+x2)/2,(y1+y2)/2);
                if ds_exists(selectedTag,ds_type_list)
                { draw_text(((x1+x2)/2)-13,((y1+y2)/2)+25,ds_list_find_value(selectedTag,0)); }
            }
            
            if selectedEquipment != noone 
            { 
                draw_sprite(spr_itemDrops,equipmentIcon,(x1+x2+100)/2,(y1+y2)/2);
            } //MN: 50+50 = 100; 50 is MN for equip slot placement.
            
            //Draw mod complete
            draw_nineSliceBox(spr_ui_modConfirm,x1+110,y1,x2+110,y2,modCanConfirm);
            
            if modCanConfirm == true
            {
                draw_sprite(spr_itemDrops,equipmentIcon,(x1+x2+220)/2,(y1+y2)/2);
            }
        }
    }
}
//#endregion
    
//-----Draw cursor item
//#region
if cursorHoldItem == true && drawCursorItem == true
{
    //-Draw item
    draw_sprite_ext(spr_itemDrops,cursorItem,mx,my,0.75,0.75,0,c_white,1);
    
    //-Draw item amount
    if cursorAmt > 0 
    {
        draw_text(mx+3,my+4,string(cursorAmt));
    }
    
    //-- Draw item tags
    if cursorTags != undefined
    {
        if ds_exists(cursorTags,ds_type_list)
        { 
            for(i=0;i<ds_list_size(cursorTags);i++)
            {
                draw_text(mx+4,my+10*i,ds_list_find_value(cursorTags,i));
            }
        }
    }
}
//#endregion

//-------------------- Healthbars ---------------------------
//#region
var playerHp = obj_player.hp;

if playerHp > 0
{ draw_nineSliceBox(spr_ui_healthBar,viewWidth-110,10,viewWidth-110+((playerHp)),13,0); }
draw_text(viewWidth-95,10,"HP: "+string(playerHp)+"\"+string(obj_player.maxHp));

//- Pie health bar
if instance_exists(obj_pie)
{
    var pieHp = obj_pie.hp;

    if pieHp > 0
    { draw_nineSliceBox(spr_ui_pieHealth,viewWidth-110,20,viewWidth-110+((pieHp)),23,0); }
    draw_text(viewWidth-95,20,"HP: "+string(pieHp)+"\"+string(obj_pie.maxHp));
}

//- Boss health bar
if worldControl.raidBoss == true
{
    var boss = worldControl.raidBossID;
    if boss != noone
    {
        var bossHp = boss.hp;
        var bossMaxHp = boss.maxHp
        draw_text(18,dispHeight-30,object_get_name(boss.object_index));
        draw_nineSliceBox(spr_ui_bossHealthBar,16,dispHeight-16,dispWidth-16,dispHeight-8,0);
        draw_nineSliceBox(spr_ui_bossHealth,16,dispHeight-16,(dispWidth-16)*(bossHp/bossMaxHp),dispHeight-8,0);
    }
}
//#endregion

//-------------------Settings Menu-----------------------------
//#region
if settingsMenu == true
{
    var xx = display_get_gui_width()/2;
    var yy = display_get_gui_height()/2;

    //Draw background
    draw_nineSliceBox(spr_ui_9slice,(xx)-50,(yy)-65,(xx)+50,(yy)+65,0);
    
    //PopMessage Setting
    draw_sprite(spr_ui_selectedBool,showPopMessage,xx-40,yy-40);
    draw_text(xx-32,yy-43,"Show Pop Messages");
    
    //Debug setting
    draw_sprite(spr_ui_selectedBool,dev,xx-40,yy-30);
    draw_text(xx-32,yy-33,"Debug Mode");
    
    //Draw save and exit button
    draw_nineSliceBox(spr_ui_button,xx-20,yy+40,xx+20,yy+50,0);
    draw_text(xx-9,yy+45,"Exit");
    
}

//------------------Quests/Task List--------------------------
if room == rm_zero
{
    if showTaskList == true
    {
        var xx = display_get_gui_width();
        var yy = 0;
        
        //Draw text
        draw_text_transformed(xx-100,yy+28,scr_getTaskText(currentTask,0,0),1,1,0);
    }
}
//#endregion

//-------------------Wave Progress Meter----------------------
//#region
if interm == false
{
    draw_text(10,dispHeight-13,"Raid Progress: ");
    draw_sprite_stretched(spr_nullLight,0,0,dispHeight-4,dispWidth,dispHeight-2);
    draw_sprite_stretched(spr_ui_waveProgress,0,0,dispHeight-4,(raidProgress/maxRaidProgress)*dispWidth,dispHeight-2);
}


draw_set_alpha(1);

//#endregion

#event keyrelease:vk_escape|Clear Ui or Open Settings

//Settings menu
if invOpen == false && showCraftingMenu == false
{ settingsMenu = !settingsMenu; }

//Close other menus
if invOpen == true then invOpen = false;
if showCraftingMenu == true then showCraftingMenu = false;

#event keyrelease:1|Select slot 1
if obj_player.toolReady == true
{
    selectedSlot = 0;
    scr_slotEquip(0);
} else equipQueue = 0;

#event keyrelease:2|Select slot 2
if obj_player.toolReady == true
{
selectedSlot = 1;
scr_slotEquip(1);
} else equipQueue = 1;

#event keyrelease:3|Select slot 3
if obj_player.toolReady == true
{
selectedSlot = 2;
scr_slotEquip(2);
} else equipQueue = 3;

#event keyrelease:4|Select slot 4
if obj_player.toolReady == true
{
selectedSlot = 3;
scr_slotEquip(3);
} else equipQueue = 3;

#event keyrelease:5|Select slot 5
if obj_player.toolReady == true
{
selectedSlot = 4;
scr_slotEquip(4);
} else equipQueue = 4;

#event keyrelease:6|Select slot 6
if obj_player.toolReady == true
{
selectedSlot = 5;
scr_slotEquip(5);
} else equipQueue = 5;

#event keyrelease:7|Select slot 7
if obj_player.toolReady == true
{
selectedSlot = 6;
scr_slotEquip(6);
} else equipQueue = 6;

#event keyrelease:C|Toggle crafting menu
showCraftingMenu = !showCraftingMenu;

if instance_exists(gameControl)
{ if currentTask == 1 then currentTask = 2; }

    
//init mod bench
event_user(0);

#event keyrelease:I|Toggle Inventory Visibility.
invOpen = !invOpen;